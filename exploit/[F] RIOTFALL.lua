-- game https://www.roblox.com/games/5595252083/RIOTFALL-ALPHA

local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local message = main_module['Message']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')

local _plr = game.Players.LocalPlayer
local _client = { }
local _shared = {
    EspFolder = { };
    AimFolder = { };
 }

local _settings = { 
    gun_mods = {
        Ammo = false;
        Reload = false;
        Recoil = false;
        Sway = false;
        Spread = false;
        Cooldown = false;
        Mode = 'Default';
    };
    infjump = false;
    barriers = false;
    killstreaks = false;
    equipment = false;
    fly = false;
}

-- // Functions // --
function _shared:GetEnemyTeam()
    local _enemies = { }
    -- for i,v in pairs(game.Players:GetChildren()) do
    --     if v.TeamColor ~= _plr.TeamColor then
    --         table.insert(_enemies, v)
    --     end
    -- end
    for i,v in pairs(game.Workspace.Gameplay:GetChildren()) do
        if v:FindFirstChild('Character') and game.Players:GetPlayerFromCharacter(v.Character.Value) and game.Players:GetPlayerFromCharacter(v.Character.Value).TeamColor ~= _plr.TeamColor then
            table.insert(_enemies, v)
        end
    end
    return _enemies
end
function _shared:ClearFolders()
    for i,v in pairs(self.AimFolder) do
        table.remove(self.AimFolder, i)
    end
    for i,v in pairs(self.EspFolder) do
        self.EspFolder[i] = nil
    end
    --print('folders cleared')
end
function _shared:UpdatedFolders()
    _shared:ClearFolders()
    for i,v in pairs(_shared:GetEnemyTeam()) do
        --if v.Character then
            _shared.EspFolder[v] = game.Players:GetPlayerFromCharacter(v.Character.Value).Character
            table.insert(_shared.AimFolder, v)
            --print('enemy player ' .. v.Name .. ' inserted')
        --end
    end
    --warn('folders updated')
end
function _client:OverWrite()
    _shared.CurrentMap = game.Workspace.Gameplay:WaitForChild('Map')
    for i,v in pairs(getgc(true)) do
        if type(v) == 'table' then
            if rawget(v, 'player') and v.player == game.Players.LocalPlayer then
                if rawget(v, 'weapons') and not rawget(v.weapons[1], 'destroyed') then
                    self.Weapons = v.weapons
                end
            end
            if rawget(v, 'handleDespawn') then
                self.Character = v.LocalCharacter
            end
            if rawget(v, 'Damage') and type(v.Damage) == 'table' then
                if rawget(v.Damage, 'Hit') and type(v.Damage.Hit) == 'function' then
                    self.Damage = v.Damage
                end
            end
            if rawget(v, 'LocalShatter') then
                self.Dynamics = v
            end
            if rawget(v, 'WaitAskCancelReload') then
                self.Weapon = v
            end
            if rawget(v, 'Flash') then
                self.Effects = v
            end
            if rawget(v, 'BulletDeathFlyByCheck') then
                self.Bullet = v
            end
            if rawget(v, 'killstreaks') and type(v.killstreaks) == 'table' and not self.Killstreaks then
                self.Killstreaks = v.killstreaks
                setmetatable(v.killstreaks, {
                    __newindex = function(_, index, value)
                        print('killstreak added')
                        if _settings.killstreaks then
                            value:Call()
                        end
                    end
                })
            end
        end
    end
    print('client overwritten')
end
_client:OverWrite()
function _client:EditCurrentWeapons(v1, v2)
    for i,v in pairs(self.Weapons) do
        local _gunData = v.weaponData
        if not _gunData['info'] then
            local _info = { }
            for i,v in pairs(_gunData) do
                _info[i]=v
            end
            _gunData['info'] = _info
        end
        local _gunInfo = _gunData['info']

        _gunData[v1] = (v2 ~= nil and tostring(v2):lower() ~= 'default') and v2 or _gunInfo[v1]

        --print(_gunData, _gunData[v1], _gunInfo[v1])
    end
end
function _client:EditCurrentProperties(v1, v2)
    for i,v in pairs(self.Weapons) do
        local _gunProperties = v.weaponData.properties
        if not _gunProperties['info'] then
            local _info = { }
            for i,v in pairs(_gunProperties) do
                _info[i]=v
            end
            _gunProperties['info'] = _info
        end
        local _gunInfo = _gunProperties['info']

        _gunProperties[v1] = (v2 ~= nil and tostring(v2):lower() ~= 'default') and v2 or _gunInfo[v1]
    end
end
function _client:UpdateWeapons()
    if _settings.gun_mods['Ammo'] then
        _client:EditCurrentWeapons('magazineAmmunition', math.huge)
    end
    if _settings.gun_mods['Spread'] then
        _client:EditCurrentWeapons('hipSpread', 0)
        _client:EditCurrentWeapons('aimedSpread', 0)
        _client:EditCurrentWeapons('proneSpreadMultiplier', 0)
        _client:EditCurrentWeapons('crouchSpreadMultiplier', 0)
        _client:EditCurrentWeapons('movementSpreadMultiplier', 0)
    end
    if _settings.gun_mods['Recoil'] then
        _client:EditCurrentWeapons('recoil', 0)
        _client:EditCurrentWeapons('aimedSpread', 0)
        _client:EditCurrentWeapons('kickback', 0)
        _client:EditCurrentWeapons('shake', 0)
        _client:EditCurrentWeapons('torque', 0)
    end
    if _settings.gun_mods['Sway'] then
        _client:EditCurrentProperties('bobbingIntensityMultiplier', 0) -- sprinting
        _client:EditCurrentProperties('tiltIntensityMultiplier', 0) -- changing direction
        _client:EditCurrentProperties('swayIntensityMultiplier', 0) -- moving camera
        _client:EditCurrentProperties('kickbackIntensityMultiplier', 0) -- firing gun
    end
    if _settings.gun_mods['Cooldown'] then
        _client:EditCurrentWeapons('fireRate', 10000)
    end
    _client:EditCurrentWeapons('firingMode', _settings.gun_mods.Mode)
end
-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Gun Hax'})

Frame1:AddToggle('Inf Ammo', function(v1)
    _settings.gun_mods.Ammo = v1
    _client:EditCurrentWeapons('magazineAmmunition', v1 and math.huge)
end)
Frame1:AddToggle('Insta Reload', function(v1)
    _settings.gun_mods.Reload = v1
end)
Frame1:AddToggle('Disable Spread', function(v1)
    _settings.gun_mods.Spread = v1
    _client:EditCurrentWeapons('hipSpread', v1 and 0)
    _client:EditCurrentWeapons('aimedSpread', v1 and 0)
    _client:EditCurrentWeapons('proneSpreadMultiplier', v1 and 0)
    _client:EditCurrentWeapons('crouchSpreadMultiplier', v1 and 0)
    _client:EditCurrentWeapons('movementSpreadMultiplier', v1 and 0)
end)
Frame1:AddToggle('Disable Recoil', function(v1)
    _settings.gun_mods.Recoil = v1
    _client:EditCurrentWeapons('recoil', v1 and 0)
    _client:EditCurrentWeapons('aimedSpread', v1 and 0)
    _client:EditCurrentWeapons('kickback', v1 and 0)
    _client:EditCurrentWeapons('shake', v1 and 0)
    _client:EditCurrentWeapons('torque', v1 and 0)
end)
Frame1:AddToggle('Disable Sway', function(v1)
    _settings.gun_mods.Sway = v1
    _client:EditCurrentProperties('bobbingIntensityMultiplier', v1 and 0) -- sprinting
    _client:EditCurrentProperties('kickbackIntensityMultiplier', v1 and 0) -- firing gun
    --_client:EditCurrentProperties('aimedBobbingIntensityMultiplier', v1 and 0)
    --_client:EditCurrentProperties('aimedSwayIntensityMultiplier', v1 and 0)
    _client:EditCurrentProperties('tiltIntensityMultiplier', v1 and 0) -- changing direction
    _client:EditCurrentProperties('swayIntensityMultiplier', v1 and 0) -- moving camera
end)
Frame1:AddToggle('Disable Cooldown', function(v1)
    _settings.gun_mods.Cooldown = v1
    _client:EditCurrentWeapons('fireRate', v1 and 10000)
end)
Frame1:AddSwitch('Fire Mode', {'Default', 'Auto', 'Semi'}, function(v1)
    _settings.gun_mods.Mode = v1
    _client:EditCurrentWeapons('firingMode', v1=='Auto' and 'AUTO' or v1=='Semi' and 'SEMI')
end)

-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Plr Hax'})

local _esp
Frame2:AddToggle('Esp', function(v1)
    if v1 then
        _esp = esp.new({folder=_shared.EspFolder,color=Color3.fromRGB(255,0,0)})
        _shared:UpdatedFolders()
    else
        _esp:Remove()
    end
end)

local _aimbot
Frame2:AddToggle('Aimbot', function(v1)
    if v1 then
        _aimbot = aimbot.new({folder=_shared.AimFolder, smoothness=1})
        _shared:UpdatedFolders()
    else
        _aimbot:Remove()
    end
end)

Frame2:AddToggle('Fly', function(v1)
    _settings.fly = v1
    if v1 then
        local _bodyVelocity = Instance.new('BodyVelocity', _plr.Character.Mesh)
		repeat wait()

            if _plr.Character:FindFirstChild('Mesh') and not _plr.Character.Mesh:FindFirstChild('BodyVelocity') then
                _bodyVelocity = Instance.new('BodyVelocity', _plr.Character.Mesh)
                --print('replaced body velocity')
            end
            
            local cam = game.Workspace.CurrentCamera.CFrame
			
			local v1 = Vector3.new()
			
			if uis:IsKeyDown(Enum.KeyCode.W) then
				v1 = v1 + Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.S) then
				v1 = v1 - Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.D) then
				v1 = v1 + Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.A) then
				v1 = v1 - Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.Space) then
				v1 = v1 + Vector3.new(0, 1, 0)
			end
			if uis:IsKeyDown(Enum.KeyCode.LeftAlt) then
				v1 = v1 - Vector3.new(0, .5, 0)
			end

			_bodyVelocity.Velocity = v1 * 25
			
		until not _settings.fly
		_bodyVelocity:Destroy()
    end
end)

Frame2:AddToggle('Auto Call Killstreak', function(v1)
    _settings.killstreaks = v1
    if v1 then
        repeat wait()
            if #_client.Killstreaks > 0 then
                for i,v in pairs(_client.Killstreaks) do
                    v:Call()
                end
            end
        until not _settings.killstreaks
    end
end)

Frame2:AddToggle('Inf Jump', function(v1)
    _settings.infjump = v1
    if v1 then
        local _old = _client.Character.IsGrounded
        repeat wait()
            if _client.Character then
                _client.Character.canJump = true
                _client.Character.IsGrounded = function() return true end
            end
        until not _settings.infjump
        _client.Character.IsGrounded = _old
    end
end)

-- // GUI Frame 3 // --
local Frame3 = library:AddFrame({name='Env Hax'})

Frame3:AddButton('Kill Enemies', function()
    for i,v in pairs(_shared:GetEnemyTeam()) do
        local _player = game.Players:GetPlayerFromCharacter(v.Character.Value)
        spawn(function()
            repeat wait()
                _client.Damage.Hit({
                    origin = Vector3.new();
                    playerName = _player.Name;
                    velocity = Vector3.new();
                    equipIndex = 0;
                    limbName = 'Head';
                    collateralHits = {};
                    ads = false;
                    slide = false;
                    prone = false;
                    crouch = false;
                    endPoint = Vector3.new()
                    
                })
            until not _player.Character:FindFirstChild('Humanoid') or _player.Character.Humanoid.Health <= 0
        end)
    end
end)

Frame3:AddButton('Break Glass', function()
    for i,v in pairs(_shared.CurrentMap.Geometry:GetDescendants()) do
        if v.Name == 'GLASS' then
            _client.Dynamics.LocalShatter(v, Vector3.new())
        end
    end
end)

Frame3:AddToggle('Disable Barriers', function(v1)
    _settings.barriers = v1
    for i,v in pairs(_shared.CurrentMap.Geometry.Collisions:GetDescendants()) do
        if v:IsA('BasePart') then
            v.CanCollide = not v1
        end
    end
end)

Frame3:AddToggle('Disable Tactical Grenades', function(v1)
    _settings.equipment = v1
    if v1 then
        repeat wait()
            if _shared.CurrentMap then
                if _shared.CurrentMap:WaitForChild('Equipment'):FindFirstChild('Smoke') then
                    for i,v in pairs(_shared.CurrentMap.Equipment:GetChildren()) do
                        if v.Name == 'SMOKE' then
                            v.Handle.Smoke.FastSmoke.Enabled = false
                        end
                    end
                end
            end
        until not _settings.equipment
    end
end)

local _gravity = game.Workspace.Gravity
Frame3:AddBox('Gravity Multiplier', function(v1)
    game.Workspace.Gravity = _gravity*tonumber(v1) or 1
end)

-- // Keybinds // --
uis.InputBegan:connect(function(key)
    if key.KeyCode == Enum.KeyCode.RightShift then
        library:Toggle()
    end
end)

-- // Hooks // --
Reload_Hook = hookfunc(_client.Weapon.Reload, function(v1)

    if _settings.gun_mods['Reload'] and not _settings.gun_mods['Ammo'] then
        if v1.weaponData.ammunition - (v1.weaponData.magazineSize - v1.weaponData.magazineAmmunition) then
            v1.weaponData.ammunition -= (v1.weaponData.magazineSize - v1.weaponData.magazineAmmunition)
            v1.weaponData:Reload() -- move below to continue refilling mag when 0 ammunition left
            v1.AmmoHud:Fire(v1.weaponData.ammunition)
            v1.MagazineHud:Fire(v1.weaponData.magazineAmmunition)
        end
        --v1.weaponData:Reload()
    end

    return Reload_Hook(v1)
end)
Stun_Hook = hookfunc(_client.Effects.Stun, function(...)
    if _settings['equipment'] then
        return
    end
    return Stun_Hook(...)
end)
Flash_Hook = hookfunc(_client.Effects.Flash, function(...)
    if _settings['equipment'] then
        return
    end
    return Flash_Hook(...)
end)

-- // Player Deployed // --
game.Workspace.ChildAdded:connect(function(c)
    local _humanoid = c:WaitForChild('Humanoid')
    local _player = game.Players:GetPlayerFromCharacter(c)

    if _player == _plr then
        _client:OverWrite()
        _client:UpdateWeapons()
    end
    _shared:UpdatedFolders()
end)
game.Workspace.Gameplay.ChildAdded:connect(function(c)
    wait(0.05)
    if c.Name == 'Map' then
        print('NEW MAP ADDED')
        _shared.CurrentMap = c
        if _settings.barriers then
            for i,v in pairs(c.Geometry.Collisions:GetDescendants()) do
                if v:IsA('BasePart') then
                    v.CanCollide = not _settings.barriers
                end
            end
        end
    end
end)

message.new({msg='Script Loaded, Credits to Sinsane (jaames#9911)'})