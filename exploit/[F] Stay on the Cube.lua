-- game https://www.roblox.com/games/4821211477/NEW-STAY-ON-THE-CUBE

-- // Library // --
local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local functions = main_module['Functions']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local message = main_module['Message']
local Keybind = main_module['Keybind']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')


-- // Variables // --
local _plr = game.Players.LocalPlayer;

getgenv()._client = { 
};

getgenv()._shared = { 
    Map = game.Workspace.CurrentMap:WaitForChild('Model');
    Balls = game.Workspace.BallsFolder;
    Money = game.Workspace.MoneyFolder;
};

local _settings = { 
    Game = {
        Balls = false;
        Magnet = false;
        Pause = false;
        Parts = false;
    };
    Player = {
        Fly = false;
        Farm = false;
        InfJump = false;
        Walk = 16;
        Jump = 50;
    }
};

-- // Functions // --
function _shared:Attach(v1)
    _shared.Map = v1;
    local _map = v1;
    local _base = _map:WaitForChild('Base')
    local _parts = _map:WaitForChild('CubeParts')
    local _extras = _map:WaitForChild('Extras')
    if _settings.Game.Pause then
        _base.Anchored = true;
    end

    spawn(function()
        for i,v in pairs(_parts:GetChildren()) do
            v:WaitForChild('WeldConstraint');
            spawn(function()
                repeat game:GetService('RunService').RenderStepped:wait() until not v:FindFirstChild('WeldConstraint') or not v.WeldConstraint.Enabled
                if _settings.Game.Parts then
                    v.CanCollide = false;
                    v.Transparency = .5
                end
            end)
        end
    end)
    spawn(function()
        for i,v in pairs(_extras:GetDescendants()) do
            if v:FindFirstChild('Weld') then
                spawn(function()
                    repeat game:GetService('RunService').RenderStepped:wait() until not v:FindFirstChild('Weld')
                    if _settings.Game.Parts then
                        v.CanCollide = false;
                        v.Transparency = .5
                    end
                end)
            end
        end
    end)
end

-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Cube Hax'})

Frame1:AddToggle('Safety Net', function(v1)
    _settings.Game.Safety = v1;
    if v1 then
        local _net = game.ReplicatedStorage.Baseplate:Clone();
        _net:ClearAllChildren();
        _net.Name = 'SAFETY';
        _net.Anchored = true;
        _net.CanCollide = true;
        _net.Size = Vector3.new(300, 1, 300);
        _net.Position = _net.Position - Vector3.new(0, 75, 0);
        _net.Transparency = 0.5;
        _net.Color = Color3.fromRGB(255, 0, 0);
        _net.Parent = game.Workspace;

        _net.Touched:connect(function(v2)
            if v2:IsDescendantOf(_plr.Character) then
                _plr.Character:MoveTo(_shared.Map.Base.Position);
            end
        end)
    else
        game.Workspace:FindFirstChild('SAFETY'):Destroy();
    end
end)
Frame1:AddToggle('Pause Cube', function(v1)
    _settings.Game.Pause = v1;
    if _shared.Map:FindFirstChild('Base') then
        _shared.Map:FindFirstChild('Base').Anchored = v1;
    end
end)
Frame1:AddToggle('Cube Magnet', function(v1)
    _settings.Game.Magnet = v1;
    if v1 then
        local _pos = Instance.new('BodyPosition', game.Players.LocalPlayer.Character:WaitForChild('HumanoidRootPart'))
        repeat game:GetService('RunService').RenderStepped:wait()
            if _plr.Character:FindFirstChild('HumanoidRootPart') and not _plr.Character.HumanoidRootPart:FindFirstChild('BodyPosition') then
                _pos = Instance.new('BodyPosition', game.Players.LocalPlayer.Character.HumanoidRootPart)
            end
            _pos.MaxForce = Vector3.new(3000, 3000, 3000);
            _pos.Position = _shared.Map:FindFirstChild('Base') and _shared.Map.Base.Position;
        until not _settings.Game.Magnet;
        if _plr.Character and _plr.Character.HumanoidRootPart:FindFirstChild('BodyPosition') then
            _plr.Character.HumanoidRootPart:FindFirstChild('BodyPosition'):Destroy();
        end
    end
end)
Frame1:AddToggle('Remove Falling Balls', function(v1)
    _settings.Game.Balls = v1;
    for i,v in pairs(_shared.Balls:GetChildren()) do
        v.Transparency = 1;
        v.CanCollide = false;
        v:FindFirstChild('old roblox face').Transparency = 1;
    end
end)
Frame1:AddToggle('Remove Broken Cubes', function(v1)
    _settings.Game.Parts = v1;
    if _shared.Map:FindFirstChild('CubeParts') then
        for i,v in pairs(_shared.Map.CubeParts:GetChildren()) do
            if not v.WeldConstraint.Enabled then
                v.CanCollide = v1 and false or true;
                v.Transparency = v1 and 0.5 or 0;
            end
        end
        for i,v in pairs(_shared.Map.Extras:GetChildren()) do
            if not v.WeldConstraint.Enabled then
                v.CanCollide = v1 and false or true;
                v.Transparency = v1 and 0.5 or 0;
            end
        end
    end
end)

-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Player Hax'})

local _fly = Frame2:AddToggle('Fly', function(v1)
    _settings.Player.Fly = v1
    if v1 then
        local _bodyVelocity = Instance.new('BodyVelocity', _plr.Character:WaitForChild('HumanoidRootPart'))
		repeat game:GetService('RunService').RenderStepped:wait()

            if _plr.Character:FindFirstChild('HumanoidRootPart') and not _plr.Character.HumanoidRootPart:FindFirstChild('BodyVelocity') then
                _bodyVelocity = Instance.new('BodyVelocity', _plr.Character.HumanoidRootPart)
                --print('replaced body velocity')
            end
            
            local cam = game.Workspace.CurrentCamera.CFrame
			
			local v1 = Vector3.new()
			
			if uis:IsKeyDown(Enum.KeyCode.W) then
				v1 = v1 + Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.S) then
				v1 = v1 - Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.D) then
				v1 = v1 + Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.A) then
				v1 = v1 - Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.Space) then
				v1 = v1 + Vector3.new(0, 1, 0)
			end
			if uis:IsKeyDown(Enum.KeyCode.LeftAlt) then
				v1 = v1 - Vector3.new(0, .5, 0)
			end
            if uis:IsKeyDown(Enum.KeyCode.LeftShift) then
				v1 = v1 + Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)*10
			end

			_bodyVelocity.Velocity = v1 * 100
			
		until not _settings.Player.Fly
		_bodyVelocity:Destroy()
    end
end)
Frame2:AddToggle('Inf Jump', function(v1) -- Toggle Fall Damage
    _settings.Player.InfJump = v1;
end)
Frame2:AddToggle('Money Magnet', function(v1)
    _settings.Player.Farm = v1
    if v1 then
        for i,v in pairs(_shared.Money:GetChildren()) do
            firetouchinterest(_plr.Character.Head, v, 0);
        end
    end
end)
Frame2:AddBox('Walk Speed', function(v1)
    _settings.Player.Walk = tonumber(v1) or 16;
    _plr.Character.Humanoid.WalkSpeed = _settings.Player.Walk;
end)
Frame2:AddBox('Jump Power', function(v1)
    _settings.Player.Jump = tonumber(v1) or 50;
    _plr.Character.Humanoid.JumpPower = _settings.Player.Jump;
end)

-- // Keybinds // --
Keybind:NewBind(Enum.KeyCode.RightShift, function() -- Library Keybind
    library:Toggle();
end)
Keybind:NewBind(Enum.KeyCode.F, function() -- Fly Keybind
    _fly:Toggle()
end)
Keybind:NewBind(Enum.KeyCode.Space, function() -- Inf Jump
    if _plr.Character and _plr.Character.Humanoid.FloorMaterial == Enum.Material.Air and _settings.Player.InfJump and not _settings.Player.Fly then
        _plr.Character.Humanoid:ChangeState('Jumping')
    end
end)

-- // Metatables // --
m = getrawmetatable(game)
old_Index = m.__index
oldnc = m.__namecall
oldnw = m.__newindex
oldc = m.__call

setreadonly(m, false)

m.__newindex = function(t, k, v) 
    if tostring(t) == 'Humanoid' and k == 'JumpPower' then
        v = _settings.Player.Jump;
    elseif tostring(t) == 'Humanoid' and k == 'WalkSpeed' then
        v = _settings.Player.Walk;
    end
    return oldnw(t, k, v)
end

-- // Spy // --
_shared.Balls.ChildAdded:connect(function(_ball)
    if _settings.Game.Balls then
        _ball.Transparency = 1;
        _ball.CanCollide = false;
        _ball:WaitForChild('old roblox face').Transparency = 1;
    end
end)
_shared.Money.ChildAdded:connect(function(_money)
    _money:WaitForChild('TouchInterest');
    if _settings.Player.Farm then
        firetouchinterest(_plr.Character.Head, _money, 0);
    end
end)

game.Workspace.CurrentMap.ChildAdded:connect(function(_map)
    _shared:Attach(_map)
end)

_shared:Attach(game.Workspace.CurrentMap:FindFirstChild('Model'));