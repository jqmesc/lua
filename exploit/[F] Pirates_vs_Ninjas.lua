-- game https://www.roblox.com/games/7029243758/Pirates-vs-Ninjas-FPS

--[[
[TO DO]:

- Teamkill
- Jump height
- Wallhaacks terrain
- Fix bighead?????
- Fire mode
- Insta respawn
- Deployables anywhere
- Unlock all skins
- Message system

--]]

local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local message = main_module['Message']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')

local _plr = game.Players.LocalPlayer

local _client = { }
local _shared = { 
    EspFolder = { };
    AimFolder = { };
    WeaponInfo = game.ReplicatedStorage.GameModules.ItemData;
}

local _settings = {
    gun_mods = {
        Ammo = false;
        Recoil = false;
        Spread = false;
        Reload = false;
        Melee = false;
        Delay = false;
        Velocity = false;
        ADS = false;
        Dmg = false;
    };
    ws = false;
    bighead = false;
    jump = false;
    walls = false;
    despawn = false;
    respawn = false;
    smoke = false;
    spy = false;
    barrier = false;
}

-- // Functions -- //
function _shared:GetEnemyTeam()
    local _enemies = { }
    for i,v in pairs(game.Players:GetChildren()) do
        if v.TeamColor ~= _plr.TeamColor then
            table.insert(_enemies, v)
        end
    end
    return _enemies
end
function _shared:ClearFolders()
    for i,v in pairs(self.AimFolder) do
        table.remove(self.AimFolder, i)
    end
    for i,v in pairs(self.EspFolder) do
        self.EspFolder[i] = nil
    end
    --print('folders cleared')
end
function _shared:UpdatedFolders()
    _shared:ClearFolders()
    for i,v in pairs(_shared:GetEnemyTeam()) do
        if v.Character then
            _shared.EspFolder[v.Character] = v.Character
            table.insert(_shared.AimFolder, v.Character)
            --print('enemy player ' .. v.Name .. ' inserted')
        end
    end
    --warn('folders updated')
end

function _client:EditPrimary(v1, v2)
    local _gunData = require(_plr.PlayerScripts.ClientModule).Loadout.Primary.Data
    local _gunInfo = require(_shared.WeaponInfo:FindFirstChild(_gunData['ModelName']))

    _gunData[v1] = (not v2 or tostring(v2):lower() ~= 'default') and v2 or _gunInfo[v1]
end
function _client:EditSecondary(v1, v2)
    local _gunData = require(_plr.PlayerScripts.ClientModule).Loadout.Secondary.Data
    local _gunInfo = require(_shared.WeaponInfo:FindFirstChild(_gunData['ModelName']))

    _gunData[v1] = (not v2 or tostring(v2):lower() ~= 'default') and v2 or _gunInfo[v1]
end
function _client:UpdateWeapons()
    local _primaryData = require(_plr.PlayerScripts.ClientModule).Loadout.Primary.Data
    local _secondaryData = require(_plr.PlayerScripts.ClientModule).Loadout.Secondary.Data

    if _settings.gun_mods['Ammo'] then
        _client:EditPrimary('Loaded', math.huge)
        _client:EditPrimary('TotalAmmo', math.huge)
    end
    if _settings.gun_mods['Recoil'] then
        _client:EditPrimary('VerticalKick', 0)
        _client:EditPrimary('HorizontalKick', 0)
        _client:EditPrimary('ADSVerticalKick', 0)
        _client:EditPrimary('ADSHorizontalKick', 0)
    end
    if _settings.gun_mods['Spread'] then
        _client:EditPrimary('BaseSpread', 0)
        _client:EditPrimary('SpreadADS', 0)
    end
    if _settings.gun_mods['Reload'] then
        _client:EditPrimary('ReloadTime', 0)
    end
    if _settings.gun_mods['Delay'] then
        _client:EditPrimary('RateOfFire', 0.1)
    end
    if _settings.gun_mods['Velocity'] then
        _client:EditPrimary('Vi', 10000)
    end
    if _settings.gun_mods['ADS'] then
        _client:EditPrimary('BaseADS', 0)
    end
    if _settings.gun_mods['Melee'] then
        _client:EditSecondary('MinSwingTime', 0)
        _client:EditSecondary('RateOfFire', 0.1)
    end
    require(_plr.PlayerScripts.Item).UpdateAmmoCounter(require(_plr.PlayerScripts.ClientModule).Loadout.Equipped)
    --print('weapon mods updated')
end

-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Gun Hax'})

Frame1:AddToggle('Inf Ammo', function(v1)
    _settings.gun_mods.Ammo = v1
    _client:EditPrimary('Loaded', v1 and math.huge)
    _client:EditPrimary('TotalAmmo', v1 and math.huge)
end)
Frame1:AddToggle('Inf Damage', function(v1)
    _settings.gun_mods.Dmg = v1
end)
Frame1:AddToggle('Insta Reload', function(v1)
    _settings.gun_mods.Reload = v1
    _client:EditPrimary('ReloadTime', v1 and 0)
end)
Frame1:AddToggle('Disable Fire Delay', function(v1)
    _settings.gun_mods.Delay = v1
    _client:EditPrimary('RateOfFire', v1 and 0.1)
end)
Frame1:AddToggle('Disable Recoil', function(v1)
    _settings.gun_mods.Recoil = v1
    _client:EditPrimary('VerticalKick', v1 and 0)
    _client:EditPrimary('HorizontalKick', v1 and 0)
    _client:EditPrimary('ADSVerticalKick', v1 and 0)
    _client:EditPrimary('ADSHorizontalKick', v1 and 0)
end)
Frame1:AddToggle('Disable Spread', function(v1)
    _settings.gun_mods.Spread = v1
    _client:EditPrimary('BaseSpread', v1 and 0)
    _client:EditPrimary('SpreadADS', v1 and 0)
    for i,v in pairs(require(_plr.PlayerScripts.Movement).SpreadAdditives) do
        if not v['_additive'] then 
            v['_additive'] = v.Additive 
        end
        v.Additive = v1 and 0 or v._additive 
    end
end)
Frame1:AddToggle('Max Velocity', function(v1)
    _settings.gun_mods.Velocity = v1
    _client:EditPrimary('Vi', v1 and 10000)
end)
Frame1:AddToggle('Insta Swap', function(v1)
    require(_plr.PlayerScripts.ClientModule).swapTime = v1 and 0 or 0.3
end)
Frame1:AddToggle('Insta ADS', function(v1)
    _settings.gun_mods.ADS = v1
    _client:EditPrimary('BaseADS', v1 and 0)
end)
Frame1:AddToggle('Disable Melee Cooldown', function(v1)
    _settings.gun_mods.Melee = v1
    _client:EditSecondary('MinSwingTime', v1 and 0)
    _client:EditSecondary('RateOfFire', v1 and 0.1)
end)

-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Plr Hax'})

local _esp
Frame2:AddToggle('Esp', function(v1)
    if v1 then
        _esp = esp.new({folder=_shared.EspFolder,color=Color3.fromRGB(255,0,0),distance=true})
        _shared:UpdatedFolders()
    else
        _esp:Remove()
    end
end)

local _aimbot
Frame2:AddToggle('Aimbot', function(v1)
    if v1 then
        _aimbot = aimbot.new({folder=_shared.AimFolder,smoothness=10})
        _shared:UpdatedFolders()
    else
        _aimbot:Remove()
    end
end)
Frame2:AddToggle('Fly', function(v1)
    _settings.fly = v1
    if v1 then
        local _bodyVelocity = Instance.new('BodyVelocity', _plr.Character.HumanoidRootPart)
		repeat game:GetService('RunService').RenderStepped:wait()

            if _plr.Character:FindFirstChild('HumanoidRootPart') and not _plr.Character.HumanoidRootPart:FindFirstChild('BodyVelocity') then
                _bodyVelocity = Instance.new('BodyVelocity', _plr.Character.HumanoidRootPart)
                --print('replaced body velocity')
            end
            
            local cam = game.Workspace.CurrentCamera.CFrame
			
			local v1 = Vector3.new()
			
			if uis:IsKeyDown(Enum.KeyCode.W) then
				v1 = v1 + Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.S) then
				v1 = v1 - Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.D) then
				v1 = v1 + Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.A) then
				v1 = v1 - Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.Space) then
				v1 = v1 + Vector3.new(0, 1, 0)
			end
			if uis:IsKeyDown(Enum.KeyCode.LeftAlt) then
				v1 = v1 - Vector3.new(0, .5, 0)
			end

			_bodyVelocity.Velocity = v1 * 100
			
		until not _settings.fly
		_bodyVelocity:Destroy()
    end
end)
Frame2:AddToggle('Inf Strength', function(v1)
    require(_plr.PlayerScripts.CharacterData).Strength.Min = v1 and require(_plr.PlayerScripts.CharacterData).Strength.Max or 0
end)
Frame2:AddToggle('Speedhax', function(v1)
    _settings.ws = v1
end)
Frame2:AddToggle('Insta Respawn', function(v1)
    _settings.respawn = v1
end)
-- Frame2:AddToggle('Insta Despawn', function(v1)
--     _settings.despawn = v1
-- end)
Frame2:AddToggle('Disable Jump Delay', function(v1)
    _settings.jump = v1
end)
Frame2:AddToggle('Disable Slide Delay', function(v1)
    require(_plr.PlayerScripts.CharacterData).SlideCooldown = v1 and 0 or 1.175
end)
Frame2:AddBox('Slide Duration (s)', function(v1)
    require(_plr.PlayerScripts.CharacterData).SlideTime = tonumber(v1) or 1.175
end)

-- // GUI Frame 3 // --
local Frame3 = library:AddFrame({name='Env Hax'})

Frame3:AddToggle('Wallhacks', function(v1)
    _settings.Walls = v1
    if v1 and game.Workspace:FindFirstChild('Map') then
        game.Workspace.Map.Parent = game.Workspace.IgnoreList
    elseif not v1 and game.Workspace.IgnoreList:FindFirstChild('Map') then 
        game.Workspace.IgnoreList.Map.Parent = game.Workspace
    end
end)
Frame3:AddToggle('Big Heads', function(v1)
    _settings.bighead = v1
    for i,v in pairs(game.Players:GetChildren()) do
        if v.TeamColor ~= game.Players.LocalPlayer.TeamColor and v.Character and v.Character:FindFirstChild('Head') then
            v.Character.Head.Size = v1 and Vector3.new(5,5,5) or Vector3.new(1,1,1)
        end
    end
end)
Frame3:AddToggle('Disable Grenades', function(v1)
    _settings.smoke = v1
end)
Frame3:AddToggle('Disable Barriers', function(v1)
    _settings.barrier = v1
    local _map = game.Workspace:FindFirstChild('Map') or game.Workspace.IgnoreList:FindFirstChild('Map')
    local _barriers = _map:FindFirstChild('barrierwalls')

    if not _barriers then return end

    for i,v in pairs(_barriers:GetChildren()) do
        v.CanCollide = not v1
        v.Transparency = v1 and 0.9 or 1
        v.Color = Color3.fromRGB(255,0,0)
    end
end)
Frame3:AddToggle('Player Spy', function(v1)
    _settings.spy = v1

    if v1 then
        local function FindNextCharacter()
            for i,v in pairs(_shared:GetEnemyTeam()) do
                if v.Character and v.Character.Parent then
                    return v.Character
                end
            end
        end
        repeat
            local _player = FindNextCharacter()
            if _player then
                local subject = _player.HumanoidRootPart
                aimbot:Aim(subject)
                repeat game:GetService('RunService').RenderStepped:wait()
                    local lv = subject.CFrame.LookVector
                    lv = lv * Vector3.new(1,0,1)
                    
                    _plr.Character.HumanoidRootPart.CFrame = subject.CFrame - lv*5
                until not _settings.spy or not subject.Parent or not subject.Parent:FindFirstChild('Humanoid') or subject.Parent.Humanoid.Health <=0
            else
                --print('no enemies')
                wait()
            end
        until not _settings.spy
    end

end)
Frame3:AddBox('Gravity', function(v1)
    game.Workspace.Gravity = tonumber(v1) or 150
end)

-- // Keybinds // --
uis.InputBegan:connect(function(key)
    if key.KeyCode == Enum.KeyCode.RightShift then
        library:Toggle()  
    elseif key.KeyCode == Enum.KeyCode.Space and _plr.Character.Humanoid.FloorMaterial == Enum.Material.Air and _settings.jump then
        _plr.Character.Humanoid:ChangeState('Jumping')
    end
end)

-- // Hooks // --
_hooks = { }

_hooks.jump = hookfunc(require(game.Players.LocalPlayer.PlayerScripts.CharacterData).SetFlag, function(...)
    local args = {...}

    if args[2] == 'Jumping' and _settings.jump then
        return false
    end

    return _hooks.jump(unpack(args))
end)

-- // Metatables  // --
m = getrawmetatable(game)
old_Index = m.__index
oldnc = m.__namecall
oldnw = m.__newindex
oldc = m.__call

setreadonly(m, false)

m.__index = function(t, k)
    if tostring(t) == 'OriginalSize' and k == 'Value' then
        return Vector3.new(1, 1, 1)
    end
    return old_Index(t, k)
end

m.__newindex = function(t, k, v)
    if tostring(t) == 'Humanoid' and k == 'WalkSpeed' and _settings['ws'] then
        v = 50
    end
    return oldnw(t, k, v)
end

m.__namecall = function(self, ...)
    local args = {...}
    if getnamecallmethod() == 'InvokeServer' and tostring(self) == 'CharacterFunction' and _settings.gun_mods['Dmg'] then

        args[2][4] = Enum.Limb.Head
    
    elseif getnamecallmethod() == 'FireServer' and tostring(self) == 'NetworkEvent' then

        if args[1] == 'PlayerDied' and _settings['despawn'] then
            wait(1)
            self:FireServer('RequestCharacterSelection')
        end
        if args[1] == 'RequestCharacterSelection' and _setting['respawn'] then
            -- local tb = game.Players.LocalPlayer.PlayerGui.Menu.Windows.Home.Center.DeployButton

            -- for i,v in pairs(getconnections(tb.MouseButton1Click)) do
            --     v.Fire()
            -- end
        end
    
    end
    
    return oldnc(self, unpack(args))
end

-- // Char spawn // --
game.Workspace.ChildAdded:connect(function(child)
    if child:WaitForChild('Humanoid', 1) then
        if child ~= _plr.Character then
            local _player = game.Players:FindFirstChild(child.Name)
            if _player and _player.TeamColor ~= _plr.TeamColor and child:FindFirstChild('Head') then
                --print('enemy spawned')
                _shared:UpdatedFolders()
                if _settings.bighead then
                    child:WaitForChild('Head').Size = Vector3.new(10,10,10)
                end
            end
            return
        end
        wait(.5)
        --print('you spawned')
        _client:UpdateWeapons()
    elseif child.Name == 'Map' then
        if _settings.walls then
            print('added map to ignore list')
            child.Parent = game.Workspace.IgnoreList
        end
        if _settings.barrier then
            print('new barriers disabled')
            if child:WaitForChild('barrierwalls') then
                for i,v in pairs(child.barrierwalls:GetChildren()) do
                    v.CanCollide = false
                    v.Transparency = 0.9
                    v.Color = Color3.fromRGB(255,0,0)
                end 
            end
        end
    end
end)

game.Workspace.IgnoreList.ChildAdded:connect(function(child)
    if child:WaitForChild('FuseEmitter') and _settings.grenade then
        print('grenade tossed')
        child:Destroy()
    end
end)

_plr.PlayerGui.Menu:GetPropertyChangedSignal('Enabled'):connect(function(v1)
    if _settings.respawn then
        --print('respawned')
        local tb = game.Players.LocalPlayer.PlayerGui.Menu.Windows.Home.Center.DeployButton

        for i,v in pairs(getconnections(tb.MouseButton1Click)) do
            v.Fire()
        end
    end
end)

-- // End // --
message.new({msg='Script loaded, credits to Sinsane  (jaames#9911)'})