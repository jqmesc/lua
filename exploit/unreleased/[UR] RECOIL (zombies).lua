-- game https://www.roblox.com/games/4913331862/RECOIL-ZOMBIES

-- // Library // --
local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local functions = main_module['Functions']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local message = main_module['Message']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')

-- // Variables // --
local _plr = game.Players.LocalPlayer;

getgenv()._client = { 
    Framework = getsenv(_plr.PlayerScripts:WaitForChild('Shockwave'));
    Weapon = getsenv(_plr.PlayerScripts:WaitForChild('Shockwave')).GetSlot(true);
    FireServer = getupvalue(getsenv(_plr.PlayerScripts:WaitForChild('Shockwave')).Dialog, 2);
};
getgenv()._shared = { 
    AimFolder = { };
    EspFolder = { };
    Windows = game.Workspace:WaitForChild('Windows');
    Zombies = game.Workspace:WaitForChild('ClientZambies');
    Visuals = game.Workspace:WaitForChild('Vis');
    Weapon = game.ReplicatedStorage.Weapons:FindFirstChild(_client.Weapon.Name);
};

local _settings = { 
    Weapon = {
        Cooldown = false;
        Reload = false;
        Ammo = false;
        Damage = false;
        Recoil = false;
        Spread = false;
        Mode = 'Default';
    };
    Player = {
        Esp = false;
        Aimbot = false;
        Speed = 1;
    };
    World = {
        Farm = false;
    };
    Noclip = {
        debounce = .1;
        size = Vector3.new(5,5,5);
        offset = Vector3.new(0,1.6,0);
        transparency = 1;
    };
}

-- // Functions // --
function _client:RefreshWeapon()
    self.Framework.LoadGun(self.Weapon);
end
function _client:Fire(v1, ...)
    self.FireServer(v1, ...);
end

function _shared:MaxAmmo(v1)
    local signal = game.Workspace.Bonuses.ChildAdded;
    local _part = Instance.new('Part');
    _part.Name = 'MaxAmmo';
    
    firesignal(signal, _part);

    if v1 then
        setupvalue(_client.Framework.Restock, 4, self.Weapon.Variables.ClipSize.Value);
    end
end
function _shared:ClearFolders()
    for i,v in pairs(self.AimFolder) do
        table.remove(self.AimFolder, i);
    end
    for i,v in pairs(self.EspFolder) do
        self.EspFolder[i] = nil;
    end
    --print('folders cleared')
end
function _shared:UpdateFolders()
    _shared:ClearFolders()
    for i,v in pairs(_shared.Zombies:GetChildren()) do
        if not _shared.Visuals:FindFirstChild(v.Name) then
            _shared.EspFolder[v] = v;
            table.insert(_shared.AimFolder, v);
        end
        --print('enemy player ' .. v.Name .. ' inserted')
    end
    --warn('folders updated')
end

-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Gun Hax'})

Frame1:AddToggle('Inf Ammo', function(v1)
    _settings.Weapon.Ammo = v1;
end)
Frame1:AddToggle('Insta Reload', function(v1)
    _settings.Weapon.Reload = v1;
end)
Frame1:AddToggle('Disable Recoil', function(v1)
    setconstant(_client.Framework.GetWeaponWeight, 14, v1 and math.huge or 0.06);
end)
Frame1:AddToggle('Disable Cooldown', function(v1)
    _settings.Weapon.Cooldown = v1;
    _client:RefreshWeapon();
end)
Frame1:AddSwitch('Fire Mode', {'Default', 'Auto', 'Semi'}, function(v1)
    _settings.Weapon.Mode = v1;
    _client:RefreshWeapon();
end)
Frame1:AddButton('Max Ammo', function()
    _shared:MaxAmmo(true);
end)

-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Plr Hax'})


local _noclip = Frame2:AddToggle('Noclip', function(v1)
    if v1 then
        local _char = _plr.Character
        local _hrp = _char:WaitForChild('HumanoidRootPart')
        local _part = Instance.new('Part', _char)
        _part.Anchored = true
        _part.CanCollide = false
        _part.Size = _settings.Noclip.size
        _part.Transparency = _settings.Noclip.transparency
        _part.CFrame = _hrp.CFrame
        
        local _recent = { }
        spawn(function()
            game:GetService('RunService'):BindToRenderStep('On', Enum.RenderPriority.Camera.Value, function()
                _part.CFrame = _hrp.CFrame + _settings.Noclip.offset
                local _parts = game.Workspace:GetPartsInPart(_part)
    
                for i,v in pairs(_parts) do
                    if _recent[v] or (not v:IsDescendantOf(_char) and v.CanCollide == true) then
                        _recent[v] = tick()
                        v.CanCollide = false
                    end
                end
            end)
        end)
        spawn(function()
            game:GetService('RunService'):BindToRenderStep('Off', Enum.RenderPriority.Camera.Value, function()
                for i,v in pairs(_recent) do
                    if tick() - v >= _settings.Noclip.debounce then
                        i.CanCollide = true
                    end
                end
            end)
        end)
    else
        game:GetService('RunService'):UnbindFromRenderStep('On');
        game:GetService('RunService'):UnbindFromRenderStep('Off');
    end
end)

local _esp
Frame2:AddToggle('Esp', function(v1)
    if v1 then
        _esp = esp.new({folder=_shared.EspFolder,color=Color3.fromRGB(255,0,0)})
        --_shared:UpdateFolders()
    else
        _esp:Remove()
    end
end)

local _aimbot
Frame2:AddToggle('Aimbot', function(v1)
    if v1 then
        _aimbot = aimbot.new({folder=_shared.AimFolder,smoothness=10})
        --_shared:UpdateFolders()
    else
        _aimbot:Remove()
    end
end)

Frame2:AddToggle('WallHacks', function(v1)
    if v1 then
        game.Workspace:FindFirstChild('Map').Parent = game.Workspace.CurrentCamera;
    else
        game.Workspace.CurrentCamera:FindFirstChild('Map').Parent = game.Workspace;
    end
end)
Frame2:AddToggle('Enable Jump', function(v1)
    _settings.Player.Jump = v1 and 50 or 0;
end)
Frame2:AddBox('WalkSpeed Multiplier', function(v1)
    _settings.Player.Speed = tonumber(v1) or 1;
    setupvalue(_client.Framework.UpdateWalkSpeed, 5, tonumber(v1) and true or false);
end)

-- // GUI Frame 3 // --
local Frame3 = library:AddFrame({name='Env Hax'})

Frame3:AddToggle('Points Farm', function(v1)
    _settings.World.Farm = v1;
    if v1 then
        for i,v in pairs(_shared.Windows:GetChildren()) do
            spawn(function()
                repeat game:GetService('RunService').RenderStepped:wait()
                    _client:Fire('Interact', v.MeshPart);
                until not _settings.World.Farm
            end)
        end
    end
end)

Frame3:AddButton('Power', function()
    local _pos = _plr.Character.PrimaryPart.CFrame;
    _plr.Character.PrimaryPart.CFrame = game.Workspace.Power.CFrame;
    wait(.3)
    _client:Fire('Interact', game.Workspace.Power)
    _plr.Character.PrimaryPart.CFrame = _pos;
end)

-- // Keybinds // --
uis.InputBegan:Connect(function(key)
    if key.KeyCode == Enum.KeyCode.RightShift then
        library:Toggle()
    elseif key.KeyCode == Enum.KeyCode.N then
        _noclip:SetState(not _noclip:GetState())
    end
end)

-- // Metatables // --
m = getrawmetatable(game)
old_Index = m.__index
oldnc = m.__namecall
oldnw = m.__newindex
oldc = m.__call

setreadonly(m, false)

m.__index = function(t, k)
    if k == 'Value' then
        if tostring(t) == 'FireRate' and _settings.Weapon.Cooldown then
            return 9999;
        elseif tostring(t) == 'FullAuto' and _settings.Weapon.Mode == 'Auto' then
            return true;
        end
    end
    return old_Index(t, k)
end

m.__newindex = function(t, k, v)
    if tostring(t) == 'Humanoid' then
        if k == 'WalkSpeed' then
            v = v*_settings.Player.Speed;
        elseif k == 'JumpPower' then
            v = _settings.Player.Jump;
        end
    end
    return oldnw(t, k, v)
end

-- // Hooks // --

-- / Weapon Spy / --
weaponHook = hookfunc(_client.Framework.LoadGun, function(v1)
    --print('caller: ', checkcaller())
    if not checkcaller() then
        _client.Weapon = v1;
    end
    return weaponHook(v1);
end)

-- / Reload Spy / --
reloadHook = hookfunc(_client.Framework.Reload, function(v1)
    --print('caller: ', checkcaller())
    if _settings.Weapon.Reload then
        _client.Framework.Restock();
        return;
    end
    return reloadHook(v1);
end)

-- / Fire Weapon / --
fireHook = hookfunc(_client.Framework.Fire, function(...)
    if _settings.Weapon.Ammo then
        local _ammo = getupvalue(_client.Framework.Restock, 4);
        setupvalue(_client.Framework.Restock, 4, _ammo + 1);
    end
    return fireHook(...)
end)

-- // Zombie Spy // --
while wait() do
--_shared.Zombies.ChildAdded:connect(function(c)
    _shared:UpdateFolders();
--end)
end
