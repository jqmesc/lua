-- game https://www.roblox.com/games/740581508/Entry-Point

-- // Library // --
local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local functions = main_module['Functions']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local message = main_module['Message']
local Keybind = main_module['Keybind']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')


-- // Variables // --
local _plr = game.Players.LocalPlayer;

getgenv()._client = {
    Framework = getsenv(_plr.PlayerGui.Weapons.WeaponScript);
    Bullet = getsenv(_plr.PlayerGui.Weapons.BulletLocal);
    Weapon = _plr.Status.Weapons:FindFirstChildOfClass('StringValue');
    WeaponKey = function() return require(_plr.PlayerGui.Weapons.WeaponKey).Key end;
    WeaponFunctions = getupvalue(getsenv(_plr.PlayerGui.Weapons.WeaponScript).equipWeapon, 4);
};

getgenv()._shared = {
    Map = {
        Players = game.Workspace.Level.Players;
        Triggers = game.Workspace.Level.Triggers;
        Actors = game.Workspace.Level.Actors;
        Bags = game.Workspace.Level.GroundBags;
        Bodies = game.Workspace.Level.Bodies;
        Items = game.Workspace.Level.GroundItems;
        Cells = game.Workspace.Level.Cells;
        Flags = game.Workspace.Level.Flags;
        Glass = game.Workspace.Level.Glass;
        Projectils = game.Workspace.Level.Projectiles;
    };
    Events = game.ReplicatedStorage.Events;
    WeaponInfo = require(game.ReplicatedStorage.Weapons.WeaponData);
    Hash = require(game.ReplicatedStorage.Loadout.InventoryValidation).Hash;
    AimFolder = { };
    EspFolder_1 = { };
    EspFolder_2 = { };
    EspFolder_3 = { };
};

local _settings = { 
    Weapon = {
        Recoil = false;
        Spread = false;
        Reload = false;
        Damage = false;
        Walls = false;
        ADS = false;
        Ammo = false;
        Rate = false;
        Mode = 'Default';
    };
    Game = {
        Walls = false;
        Kill = false;
    };
    Player = {
        Interact;
        InfJump = false;
    };
};

-- // Functions // --
function _client:CustomShot(v1)
    local _new = { }
    for i,v in pairs(v1) do
        _new[i]=v;
    end

    if _settings.Weapon['Recoil'] then
        _new.RecoilFirstShot = 0;
        _new.RecoilXMin = 0;
        _new.RecoilUp = 0;
        _new.RecoilCam = 0;
        _new.RecoilDecrease = 0;
    end
    if _settings.Weapon['Spread'] then
        _new.RecoilXSpread = 0;
        _new.SpreadHipMovMin = 0;
        _new.SpreadAimMin = .1;
        _new.SpreadHipMovMax = 0;
        _new.SpreadAimMovMax = 0;
        _new.SpreadIncrease = 0;
        _new.SpreadAimMax = 0;
        _new.SpreadHipMin = .1;
        _new.SpreadHipMax = 0;
        _new.SpreadDecrease = 0;
        _new.SpreadAimMovMin = 0;
    end
    if _settings.Weapon['Damage'] then
        _new.DmgAtMax = math.huge;
        _new.DmgAtMin = math.huge;
    end
    if _settings.Weapon['Rate'] then
        _new.FireRate = 0.01;
        _new.FireDelay = 0;
    end
    if _settings.Weapon['Reload'] then
        _new.ReloadSpeed = 0;
    end
    if _settings.Weapon['Ammo'] then
        _new.ReloadSpeed = math.huge;
    end
    if _settings.Weapon['ADS'] then
        _new.ZoomTime = 0;
    end
    if _settings.Weapon['Mode'] ~= 'Default' then
        local _mode = _settings.Weapon['Mode']
        _new.FireType = _mode == 'Semi' and 1 or 2;
    end

    spawn(function()
        repeat game:GetService('RunService').RenderStepped:wait() -- Custom Auto Fire
            if _settings.Weapon['Mode'] == 'Auto' and _new.FireType ~= 2 then
                if game:GetService('UserInputService'):IsMouseButtonPressed(Enum.UserInputType.MouseButton1) and _plr.PlayerGui.Weapons.WeaponScript.GunOut.Value then
                    require(_plr.Status.Scripts:FindFirstChildOfClass('ModuleScript'):WaitForChild('SourceData')).Fire()
                end
            end
        until not _plr.Status.Scripts:FindFirstChildOfClass('ModuleScript')
    end)

    return _new;
end
function _client:RefreshWeapon()
    local _last = _plr.PlayerGui.InventoryGui.LastEquipped.Value; 

    self.Framework.swapWeapon();

    if _last then
        keypress(_last == 1 and 0x31 or 0x32)
        keyrelease(_last == 1 and 0x31 or 0x32)
    end
end
function _client:Interact(v1)
    setupvalue(self.Framework.interactionHandling, 3, v1);
    setupvalue(self.Framework.interactionHandling, 3, v1.Interact);
    setupvalue(self.Framework.interactionHandling, 14, true);
    _client.Framework.interactionHandling(v1.Interact, Enum.UserInputState.Begin)
end
function _client:SpotEnemy(v1)
    self.WeaponFunctions.SpotEnemy:FireServer(v1)
end
function _client:Pickup(v1)
    if v1:FindFirstChild('Data') then
        _plr.PlayerGui.Weapons.WeaponScript.TryPickup:Invoke(v1.Data)
    end
end
function _client:DropBag()
    self.WeaponFunctions.DropBag:InvokeServer();
end
function _client:Damage(v1, v2)
    local weaponKey = require(game.Players.LocalPlayer.PlayerGui.Weapons.WeaponKey);
    local _char = v1.Character;
    local _humanoid = _char:FindFirstChild('Humanoid');
    local _head = _char:FindFirstChild('Head');

    if _humanoid and _head then

        local _,__ = self.Bullet.l1l();

        local _key;
        if not weaponKey.Key then
            _key = true;
            weaponKey.SetWeaponKey(weaponKey.StartFetch(), _client.WeaponFunctions[_shared.Hash('GenerateWeaponKey_7zU')]:InvokeServer());
        end
        self.Bullet.PlayerHitRemote:FireServer(_humanoid, v2, 0, _head, Vector3.new(), _head.Position, 0, __, weaponKey.Key);
        if _key then
            weaponKey.ClearWeaponKey();
        end
    end
end
function _client:Kill(v1)
    local _char = v1.Character;
    local _humanoid = _char.Humanoid;

    self:Damage(v1, _humanoid.Health);
end

function _shared:ClearFolders()
    for i,v in pairs(self.AimFolder) do
        table.remove(self.AimFolder, i)
    end
    for i,v in pairs(self.EspFolder_1) do
        self.EspFolder_1[i] = nil
    end
    for i,v in pairs(self.EspFolder_2) do
        self.EspFolder_2[i] = nil
    end
    for i,v in pairs(self.EspFolder_3) do
        self.EspFolder_3[i] = nil
    end
    --print('folders cleared')
end
function _shared:UpdatedFolders()
    _shared:ClearFolders()
    for i,v in pairs(self.Map.Actors:GetChildren()) do
        if v.Character:FindFirstChild('Civ') then
            self.EspFolder_3[v.Character] = v.Character;
        else
            self.EspFolder_1[v.Character] = v.Character;
            table.insert(self.AimFolder, v.Character)
        end
    end
    for i,v in pairs(self.Map.Glass:GetChildren()) do
        if v:FindFirstChild('Body') then
            self.EspFolder_2[v] = v;
            table.insert(self.AimFolder, v)
        end
    end
    --warn('folders updated')
end
-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Gun Hax'})

Frame1:AddToggle('Wallhacks', function(v1)
    _settings.Weapon.Walls = v1;
end)
local _crosshair = Instance.new('ScreenGui', main_module.MainFrame);
Frame1:AddToggle('Crosshair', function(v1)
    if v1 then
        local crosshair = Instance.new('Frame', _crosshair)
        crosshair.Size = UDim2.new(0,2,0,2)
        crosshair.BackgroundColor3 = Color3.fromRGB(255,255,255)
        crosshair.Position = UDim2.new(0.5, 0, 0.483, 0)
        crosshair.BorderSizePixel = 0

        spawn(function()
            repeat game:GetService('RunService').RenderStepped:wait()
                if crosshair then
                    if uis:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
                        crosshair.BackgroundTransparency = 1
                    else
                        crosshair.BackgroundTransparency = 0
                    end
                end
            until not crosshair;
        end)
    else
        _crosshair:ClearAllChildren();
    end
end)
Frame1:AddToggle('Disable Recoil', function(v1)
    _settings.Weapon.Recoil = v1;
    _client:RefreshWeapon();
end)
Frame1:AddToggle('Disable Spread', function(v1)
    _settings.Weapon.Spread = v1;
    _client:RefreshWeapon();
end)
Frame1:AddToggle('Insta Reload', function(v1)
    _settings.Weapon.Reload = v1;
    _client:RefreshWeapon();
end)
Frame1:AddToggle('Insta ADS', function(v1)
    _settings.Weapon.ADS = v1;
    _client:RefreshWeapon();
end)
Frame1:AddToggle('Inf Ammo', function(v1)
    _settings.Weapon.Ammo = v1;
    _client:RefreshWeapon();
    if not v1 then      
        for i,v in pairs(_plr.Status.Weapons:GetChildren()) do
            v.AmmoLoaded.Value = v.ClipMax.Value;
        end
    end
end)
Frame1:AddToggle('Inf Damage', function(v1)
    _settings.Weapon.Damage = v1;
    _client:RefreshWeapon();
end)
Frame1:AddToggle('Max Fire Rate', function(v1)
    _settings.Weapon.Rate = v1;
    _client:RefreshWeapon();
end)
Frame1:AddSwitch('~Fire Type', {'Default','Auto','Semi'}, function(v1)
    _settings.Weapon.Mode = v1;
    _client:RefreshWeapon();
end)

-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Plr Hax'})

local _fly = Frame2:AddToggle('Fly', function(v1) -- Fly
    _settings.Player.Fly = v1
    if v1 then
        local _bodyVelocity = Instance.new('BodyVelocity', _plr.Character.HumanoidRootPart)
		repeat game:GetService('RunService').RenderStepped:wait()

            if _plr.Character:FindFirstChild('HumanoidRootPart') and not _plr.Character.HumanoidRootPart:FindFirstChild('BodyVelocity') then
                _bodyVelocity = Instance.new('BodyVelocity', _plr.Character.HumanoidRootPart)
                --print('replaced body velocity')
            end
            
            local cam = game.Workspace.CurrentCamera.CFrame
			
			local v1 = Vector3.new()
			
			if uis:IsKeyDown(Enum.KeyCode.W) then
				v1 = v1 + Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.S) then
				v1 = v1 - Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.D) then
				v1 = v1 + Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.A) then
				v1 = v1 - Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.Space) then
				v1 = v1 + Vector3.new(0, 1, 0)
			end
			if uis:IsKeyDown(Enum.KeyCode.LeftAlt) then
				v1 = v1 - Vector3.new(0, .5, 0)
			end
            if uis:IsKeyDown(Enum.KeyCode.LeftShift) then
				v1 = Vector3.new(v1.X, 0, v1.Z)*10
			end

			_bodyVelocity.Velocity = v1 * 100
			
		until not _settings.Player.Fly
		_bodyVelocity:Destroy()
    end
end)
local _recent = { }
local _noclip = Frame2:AddToggle('Noclip', function(v1) -- Noclip
    local _config = {
        debounce = .1;
        size = Vector3.new(5,5,5);
        offset = Vector3.new(0,1.6,0);
        transparency = 1;
    };
    if v1 then
        local _char = _plr.Character
        local _hrp = _char:WaitForChild('HumanoidRootPart')
        local _part = Instance.new('Part', _char)
        _part.Anchored = true
        _part.CanCollide = false
        _part.Size = _config.size
        _part.Transparency = _config.transparency
        _part.CFrame = _hrp.CFrame
        
        spawn(function()
            game:GetService('RunService'):BindToRenderStep('On', Enum.RenderPriority.Camera.Value, function()
                _part.CFrame = _hrp.CFrame + _config.offset
                local _parts = game.Workspace:GetPartsInPart(_part)
    
                for i,v in pairs(_parts) do
                    if _recent[v] or (not v:IsDescendantOf(_char) and v.CanCollide == true) then
                        _recent[v] = tick()
                        v.CanCollide = false
                    end
                end
            end)
        end)
        spawn(function()
            game:GetService('RunService'):BindToRenderStep('Off', Enum.RenderPriority.Camera.Value, function()
                for i,v in pairs(_recent) do
                    if tick() - v >= _config.debounce then
                        i.CanCollide = true
                    end
                end
            end)
        end)
    else
        game:GetService('RunService'):UnbindFromRenderStep('On');
        game:GetService('RunService'):UnbindFromRenderStep('Off');
        for i,v in pairs(_recent) do
            i.CanCollide = true
        end
    end
end)

-- Frame2:AddToggle('God', function(v1)
--     _settings.Player.God = v1;
--     if v1 then
--         repeat game:GetService('RunService').RenderStepped:wait()
--             if _plr.Character and _plr.Character.Humanoid.Health < _plr.Character.Humanoid.MaxHealth then
--                 local _health = _plr.Character.Humanoid.Health;
--                 _client:Damage(_plr, -(_plr.Character.Humanoid.MaxHealth - _plr.Character.Humanoid.Health) );
--                 repeat game:GetService('RunService').RenderStepped:wait() until not _settings.Player.God or _plr.Character.Humanoid.Health ~= _health
--             end
--         until not _settings.Player.God;
--     end
-- end)

Frame2:AddToggle('Inf Jump', function(v1)
    _settings.Player.InfJump = v1;
end)

Frame2:AddToggle('Inf Stamina', function(v1)
    _settings.Player.Stamina = v1;
    if v1 then
        repeat game:GetService('RunService').RenderStepped:wait()
            setupvalue(_client.Framework.startRun, 2, 1);
        until not _settings.Player.Stamina;
    end
end)

Frame2:AddToggle('Interact Distance', function(v1)
    _settings.Player.Distance = v1;
end)
Frame2:AddToggle('~Insta Interact', function(v1)
    _settings.Player.Interact = v1;
end)

local _defaultSprint = {[1]=_client.Framework.walkSpeedTbl[1];[2]=_client.Framework.walkSpeedTbl[2];[3]=_client.Framework.walkSpeedTbl[3]}
Frame2:AddBox('Sprint Speed', function(v1)
    _client.Framework.walkSpeedTbl[3] = tonumber(v1) or _defaultSprint[3];
    _client.Framework.startRun();
    _client.Framework.stopRun();
end)

local _defaultJump = _plr.Status.Inputs.JumpEnabled.Power.Value;
Frame2:AddBox('Jump Power', function(v1)
    _plr.Status.Inputs.JumpEnabled.Power.Value = tonumber(v1) or _defaultJump;
end)

-- // GUI Frame 2 // --
local Frame3 = library:AddFrame({name='Env Hax'})

local _aimbot
Frame3:AddToggle('Aimbot', function(v1)
    if v1 then
        _aimbot = aimbot.new({folder=_shared.AimFolder,smoothness=1})
        _shared:UpdatedFolders()
    else
        _aimbot:Remove()
    end
end)
local _esp
Frame3:AddToggle('Esp [Police]', function(v1)
    if v1 then
        _esp = esp.new({folder=_shared.EspFolder_1,color=Color3.fromRGB(255,0,0)})
        _shared:UpdatedFolders()
    else
        _esp:Remove()
    end
end)
local _esp2
Frame3:AddToggle('Esp [Cameras]', function(v1)
    if v1 then
        _esp2 = esp.new({folder=_shared.EspFolder_2,color=Color3.fromRGB(0,0,255)})
        _shared:UpdatedFolders()
    else
        _esp2:Remove()
    end
end)
local _esp3
Frame3:AddToggle('Esp [Civilians]', function(v1)
    if v1 then
        _esp3 = esp.new({folder=_shared.EspFolder_3,color=Color3.fromRGB(255,255,255)})
        _shared:UpdatedFolders()
    else
        _esp3:Remove()
    end
end)
Frame3:AddToggle('~Disable Barriers', function(v1)
    for i,v in pairs(_shared.Map.Glass:GetChildren()) do
        if v.Name == 'PlayerBarrier' then
            v.CanCollide = v1 and false or true;
            v.Transparency = v1 and 0.5 or 1;
            v.Color = Color3.fromRGB(255,0,0);
        end
    end
end)

Frame3:AddToggle('Loop Kill Npcs', function(v1)
    _settings.Game.Kill = v1;
    if v1 then
        repeat game:GetService('RunService').RenderStepped:wait()
            local _actors = _shared.Map.Actors:GetChildren();
            if #_actors > 0 then
                for i,v in pairs(_actors) do
                    if v:FindFirstChild('Character') and v.Character:FindFirstChild('Humanoid') then
                        _client:Kill(v);
                        wait(0.15);
                    end
                end
            end
        until not _settings.Game.Kill;
    end
end)

-- Frame3:AddButton('Tag Npcs', function()
--     for i,v in pairs(_shared.Map.Actors:GetChildren()) do
--         _client:SpotEnemy(v);
--     end
-- end)

-- Frame3:AddButton('Pickup Ground Items', function()
--     for i,v in pairs(_shared.GroundItems:GetChildren()) do
--         _client:Pickup(v);
--     end
-- end)

-- // Keybinds // --
Keybind:NewBind(Enum.KeyCode.RightShift, function() -- Library Keybind
    library:Toggle();
end)
Keybind:NewBind(Enum.KeyCode.Space, function() -- Inf Jump
    if _plr.Character and _plr.Character.Humanoid.FloorMaterial == Enum.Material.Air and _settings.Player.InfJump and not _settings.Player.Fly then
        _plr.Character.Humanoid:ChangeState('Jumping')
    end
end)
Keybind:NewBind(Enum.KeyCode.LeftAlt, function() -- Fly Keybind
    _fly:Toggle()
end)
Keybind:NewBind(Enum.KeyCode.N, function() -- Noclip Keybind
    _noclip:Toggle()
end)

-- // Hooks // --
weaponHook = hookfunc(_client.Framework.getModdedStats, function(v1)
    local _data = weaponHook(v1)
    local _new = _client:CustomShot(_data);

    return _new;
end)

mathHook = hookfunc(getrenv().math.min, function(v1, v2)
    if v1 == math.huge then
        return math.huge;
    end
    return mathHook(v1,v2)
end)

toolsHook = hookfunc(_client.Framework.hasToolsForInteraction, function(...)
    local _old, _msg = toolsHook(...)

    if not _old then
        return true, '[F] - lolz "'.._msg..'"';
    end 

    return _old
end)

-- // Metatables // --
m = getrawmetatable(game)
old_Index = m.__index
oldnc = m.__namecall
oldnw = m.__newindex
oldc = m.__call

setreadonly(m, false)

m.__namecall = function(self, ...)
    local args = {...}
    if getnamecallmethod() == 'Kick' then
        warn('Kick Attempt')
        return;
    elseif getnamecallmethod() == 'InvokeServer' then
        if tostring(args[2]) ==  'AmmoLoaded'  and _settings.Weapon.Ammo then
            --print(tostring(self))
            return math.huge;
        end
        _client.Framework.AmmoTampered = false;
    elseif getnamecallmethod() == 'FireServer' then
        if tostring(args[2]) == 'Interact' and args[3] and _settings.Player.Interact then
            print('insta interact')
            _settings.Player.Interact = false;
            _client:Interact(args[2].Parent)
            _settings.Player.Interact = true;
            return;
        end
    elseif getnamecallmethod() == 'FindPartOnRayWithIgnoreList' and _settings.Player.Distance then
        if not args[3] then
            local _mouse = game.Players.LocalPlayer:GetMouse();
            local _new = game.Workspace:FindPartOnRayWithIgnoreList(Ray.new(_mouse.UnitRay.Origin, _mouse.UnitRay.Direction * 1000), args[2], true);

            if _new then
                return _new, _plr.Character.HumanoidRootPart.Position;
            end
        end
    end
    return oldnc(self, unpack(args))
end

m.__index = function(t, k)
    if tostring(t) == 'AmmoLoaded' and k == 'Value' and _settings.Weapon['Ammo'] then
        return math.huge;
    end
    local _return;
    pcall(function()
        _return = old_Index(t, k);
    end)
    return _return; 
end

-- // Spy // --
_shared.Map.Actors.ChildAdded:connect(function(c)
    c:WaitForChild('Character'):WaitForChild('Humanoid');
    _shared:UpdatedFolders()
end)