-- game https://www.roblox.com/games/171391948/Vehicle-Simulator

--[[
[TO DO]:

- lost island/autofarm tp
- unlock car doors
- start before countdown
- spawn any car
- disable vehicle collisions
- force time of day
- anti disable phone
- fling cars
- version 1 complete

--]]

-- // Library // --
local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local functions = main_module['Functions']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local message = main_module['Message']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')

-- // Variables // --
local _plr = game.Players.LocalPlayer

getgenv()._client = { }

getgenv()._shared = {
    Vehicles = game.Workspace.Vehicles;
    Simchassis = game.ReplicatedStorage.Simchassis;
    ModuleScripts = game.ReplicatedStorage.ModuleScripts;
    Races = game.ReplicatedStorage['Game Modes V2'].Shared['Race Statuses'];
    Admins = require(game.ReplicatedStorage.admin.admin_list);
    Info = require(game.ReplicatedStorage.Simchassis.Modules.InitialVehicleData);
}

getgenv()._settings = {
    Vehicle = {
        Torque = 1;
        Nitro = 1;
        Jump = 1;
        Rotate = 1;
        Brake = 1;
        Speed = 1;
        Afk = false;
        Rendered = false;
        Pause = false;
        Race = false;
        Fly = false;
        Farm = false;
        Farm2 = false;
        Farm3 = false;
        Join = false;
        Noclip = false;
        Stabilize = false;
        Maxed = false;
        InfNitro = false;
        InfJump = false;
    };
    Stats = {
        Crates = 0;
        Saves_1 = 0;
        Saves_2 = 0;
        Races = 0;
        Time = tick();
    }
}

-- // Functions // --
function _client:getVehicle()
    --return _plr.leaderstats.CurrentVehicle.Value;
    for i,v in pairs(_shared.Vehicles:GetChildren()) do
        --if v:FindFirstChild('owner') and v.owner.Value == _plr.Name then
        if v:FindFirstChild('Chassis') and v.Chassis:FindFirstChild('VehicleSeat') and v.Chassis.VehicleSeat.Occupant and v.Chassis.VehicleSeat.Occupant.Parent == _plr.Character then
            return v;
        end
    end
end
function _client:getInfo()
    if _client:getVehicle() then
        for i,v in pairs(_shared.Info) do
            if v.vid == tostring(self:getVehicle()) then
                return v.handling;
            end
        end
    end
end
function _client:ownedVehicle()
    for i,v in pairs(_shared.Vehicles:GetChildren()) do
        if v:FindFirstChild('owner') and v.owner.Value == _plr.Name then
            return v;
        end
    end
end
function _client:isInVehicle()
    local _vehicle = self:getVehicle();
    return _vehicle and _vehicle.Chassis:WaitForChild('VehicleSeat').Occupant and _vehicle.Chassis.VehicleSeat.Occupant.Parent == _plr.Character;
end
function _client:editVehicle(v1, v2)
    if self:getVehicle() then
        local _handling = self:getVehicle().Handling;
        local _info = self:getInfo();

        local _v = _handling:FindFirstChild(v1);
        local _old = _info[v1];
        local _set = v2;
        if _set and type(_set) == 'table' then
            _v = _v:FindFirstChild(v2[1]);
            _old = _old[v2[1]];
            _set = _set[2];
        end

        _v.Value = (_set ~= nil or tostring(_set):lower() ~= 'default') and _set or _old;
    end
end
function _client:Horn()
    self.framework.Horn();
end
function _client:Boost(v1)
    self.framework.Boost(v1);
end
function _client:Teleport(v1, v2)
    if self:isInVehicle() then
        if self:getVehicle().Bodykit.CenterOfMass:FindFirstChild('BodyPosition') then
            _shared:Message('Teleport: Error (Unavailable)', 2);
            return
        end
        local _cm = _client:getVehicle().Bodykit.CenterOfMass;
        local _moveForce = Vector3.new(99999, 99999, 99999);
        local _accuracy = 20;
        local _time = 2;
        if v2 then
            local _flag = _settings.Vehicle.Noclip;
            _settings.Vehicle.Noclip = true
            --print('step 1')
            local _h1 = Instance.new('BodyPosition', _cm);
            _h1.Position = Vector3.new(_cm.Position.X, v1.Y + 200, _cm.Position.Z);
            _h1.MaxForce = _moveForce;
            repeat wait() until math.abs((_h1.Position - (_cm.Position)).magnitude) <= _accuracy
            _h1:Destroy()
            --print('step 2')
            local _force = _shared:calculateForce(Vector3.new(v1.X, _cm.Position.Y, v1.Z) - (_cm.Position), _time);
            local _h2 = Instance.new('BodyPosition', _cm);
            _h2.Position = Vector3.new(v1.X, _cm.Position.Y, v1.Z);
            _h2.MaxForce = Vector3.new(_force, math.huge, _force)
            wait(_time)
            _h2:Destroy()
            --print('step 3')
            _settings.Vehicle.Noclip = false;
            local _h3 = Instance.new('BodyPosition', _cm);
            _h3.Position = Vector3.new(_cm.Position.X, v1.Y, _cm.Position.Z);
            _h3.MaxForce = _moveForce;
            repeat wait() until math.abs((_h3.Position - (_cm.Position)).magnitude) <= _accuracy
            _h3:Destroy()
            _settings.Vehicle.Noclip = _flag;
            _shared:Message('Teleport: Success', 1);
        else
            self:getVehicle().PrimaryPart = self:getVehicle():WaitForChild('Chassis').VehicleSeat;
            self:getVehicle():SetPrimaryPartCFrame(v1)
            self:getVehicle().PrimaryPart = self:getVehicle():WaitForChild('Bodykit').CenterOfMass;
        end
    end
end
function _client:onEnter()
    self.framework = getsenv(_plr.PlayerGui:WaitForChild('CarGui').LocalScript);
    self:getVehicle().Bodykit:WaitForChild('PredictionCollider')
    self:getVehicle().Bodykit.CenterOfMass.Anchored = _settings.Vehicle.Pause;

    if _settings.Vehicle['Stabilize'] then
        self:getVehicle().Bodykit.CenterOfMass.Stablize.MaxTorque = Vector3.new(100, 10, 10);
    end
    for i,v in pairs(self:getVehicle().Handling:GetChildren()) do
        if _settings.Vehicle[v.Name] then
            self:editVehicle(v.Name, _settings.Vehicle[v.Name]);
            if v.Name == 'Torque' then 
                self:editVehicle(v.Name, _client:getInfo()['Torque']['force']*_settings.Vehicle['Torque']);
            end
        end   
    end
    local _recent = { }
    spawn(function()
        local _ignore = { 
            [1] = game.Workspace.SidewalkMisc;
            [2] = game.Workspace.Vehicles;
            [3] = game.Workspace.NewOldRoads;
            [4] = game.Workspace.BeachtownRoads;
            [5] = game.Workspace.Sidewalks;
            [6] = game.Workspace.NewRaceTrack;
            [7] = game.Workspace.Highway;
            [8] = game.Workspace.Runway;
            [9] = game.Workspace.DragStrip2;
            [10] = game.Workspace.DowntownRoads;
            [11] = game.Workspace.DesertAirport.Runway;
            [12] = game.Workspace.AirportBaseMisc;
            [13] = game.Workspace.Misc.Track;
            [14] = game.Workspace.Misc.Sidewalk;
            [15] = game.Workspace.Farms;
            [16] = game.Workspace.ParkingLot;
            [17] = game.Workspace.TrainTrackBase;
            [18] = game.Workspace.Arena.Teams.Team_Blue.BlueField;
            [19] = game.Workspace.Arena.Teams.Team_Red.RedField;
            [20] = game.Workspace.Roads;
            [21] = game.Workspace.HighSchool.SchoolParkingLot;
            [22] = game.Workspace.ShippingYardBase;
            [23] = game.Workspace.Buildings.Structures.Foundations;
            [24] = game.Workspace.MidtownRoads;
        }
		game:GetService('RunService'):BindToRenderStep('On', Enum.RenderPriority.Camera.Value, function()
            if _settings.Vehicle['Noclip'] then
                local _parts = game.Workspace:GetPartsInPart(self:getVehicle().Bodykit.PredictionCollider);

                for i,v in pairs(_parts) do
                    local _flag;
                    for i2,v2 in pairs(_ignore) do
                        if v:IsDescendantOf(v2) then
                            _flag = true;
                        end
                    end
                    if not _flag and (_recent[v] or v.CanCollide == true) then
                        --print('collision')
                        _recent[v] = tick();
                        v.CanCollide = false;
                    end
                end
            end
        end)
    end)
    spawn(function()
		game:GetService('RunService'):BindToRenderStep('Off', Enum.RenderPriority.Camera.Value, function()
			for i,v in pairs(_recent) do
				if tick() - v >= 1 then
					i.CanCollide = true;
				end
			end
		end)
	end)
    spawn(function()
        repeat wait() until not _client:isInVehicle();
        game:GetService('RunService'):UnbindFromRenderStep('On');
        game:GetService('RunService'):UnbindFromRenderStep('Off');
    end)
    _shared:Message('Script: Vehicle Hooked (' .. _client:getVehicle():FindFirstChildOfClass('BoolValue').Name .. ')', 3);
end
function _client:initialize()
    _shared:Message('Script: Loaded', 3)
    if _client:isInVehicle() then
        self:onEnter();
    end
end

function _shared:getQueued()
    return (_plr.Character and _plr.Character:WaitForChild('mode_queued').Value ~= 0) and _plr.Character.mode_queued.Value;
end
function _shared:getRacing()
    return _client:getVehicle() and game:GetService('CollectionService'):HasTag(_client:getVehicle(), 'race');
end
function _shared:enterVehicle(v1)
    self.Simchassis.Modules.VehicleSeats.seat_player:InvokeServer(v1:WaitForChild('Chassis'):WaitForChild('VehicleSeat'))
end
function _shared:Message(v1, v2)
    require(self.ModuleScripts.PlayerMessage)(_plr, v1, v2);
end
function _shared:PlaySound(v1)
    _shared.Simchassis.RemoteEvents.Sound:FireServer(v1);
end
function _shared:calculateForce(v1, v2)
    local _cm = _client:getVehicle():WaitForChild('Bodykit').CenterOfMass;
    local _time = v2;
    local _dist = math.abs((v1 - _cm.Position).magnitude);
    local _acceleration = (_dist*2)/(_time^2);
    local _force = _client:getInfo()['Mass']*_acceleration;

    return _force;
end
function _shared:findRace()
    for i,v in pairs(self.Races.queue_statuses:GetChildren()) do
        if v:FindFirstChild('status') and v.status.Value:find('/') and not _shared:getQueued() then
            local _players = v.players.Value
            local _max = tonumber(string.sub(string.split(v:WaitForChild('status').Value, '/')[2], 1, 1))

            if _players >= _max then
                print('Highest Value Race Found: '..v.Name);
                return v;
            end
        end
    end
    for i,v in pairs(self.Races.queue_statuses:GetChildren()) do
        if v:FindFirstChild('status') and v.status.Value:find('/') then
            local _players = v.players.Value
            local _max = tonumber(string.sub(string.split(v:WaitForChild('status').Value, '/')[2], 1, 1))

            if _max > 1 and _players == _max - 1 then
                print('Highest Value Race Found: '..v.Name);
                return v;
            end
        end
    end
    --return self.Races.queue_statuses['16'];
end
function _shared:Clean()
    for i,v in pairs(_plr.PlayerGui:GetChildren()) do
        if v.Name == 'Endrace_results' then
            firesignal(v.Frame.next_button.MouseButton1Click);
        end
    end
end
function _shared:Safe()
    for i,v in pairs(game.Players:GetChildren()) do
        for _,__ in pairs(self.Admins) do
            if functions:FindTable(__, v.UserId)() then
                return false, functions:FindTable(__, v.UserId)();
            end
        end
    end
    return true;
end

-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Vehicle Physics'})

Frame1:Add('Environment Modifications')
Frame1:AddToggle('Vehicle Fly', function(v1)
    _settings.Vehicle.Fly = v1
    _shared:Message('Fly: '..(v1 and 'On' or  'Off'), 1);
    if v1 then
        repeat wait()
            local _vehicle = _client:getVehicle()
            if _client:isInVehicle() then

                if not _client:getVehicle().Bodykit.CenterOfMass:FindFirstChild('BodyForce') then
                    Instance.new('BodyForce', _client:getVehicle().Bodykit.CenterOfMass)
                end
                
                local _bodyForce = _client:getVehicle().Bodykit.CenterOfMass:FindFirstChild('BodyForce')
                local cam = game.Workspace.CurrentCamera.CFrame
                local v1 = Vector3.new()
                
                if uis:IsKeyDown(Enum.KeyCode.W) then
                    v1 = v1 + Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
                end
                if uis:IsKeyDown(Enum.KeyCode.S) then
                    v1 = v1 - Vector3.new(cam.LookVector.X*2, 0, cam.LookVector.Z*2)
                end
                if uis:IsKeyDown(Enum.KeyCode.D) then
                    v1 = v1 + Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
                end
                if uis:IsKeyDown(Enum.KeyCode.A) then
                    v1 = v1 - Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
                end
                if uis:IsKeyDown(Enum.KeyCode.Space) then
                    v1 = v1 + Vector3.new(0, 1.5, 0)
                end
                if uis:IsKeyDown(Enum.KeyCode.LeftAlt) then
                    v1 = v1 - Vector3.new(0, 0.5, 0)
                end

                _bodyForce.Force = v1 * 100000;

            end
                
        until not _settings.Vehicle.Fly
        if _client:getVehicle() and _client:getVehicle().Bodykit.CenterOfMass:FindFirstChild('BodyForce') then
            _client:getVehicle().Bodykit.CenterOfMass:FindFirstChild('BodyForce'):Destroy();
        end
    end
end)
Frame1:AddToggle('Vehicle Noclip', function(v1)
    _settings.Vehicle.Noclip = v1;
    _shared:Message('Noclip: '..(v1 and 'On' or  'Off'), 1);
end)
-- Frame1:AddToggle('Stabilize', function(v1)
--     _settings.Vehicle.Stabilize = v1;
--     if _client:isInVehicle() then
--         _client:getVehicle().Bodykit.CenterOfMass.Stablize.MaxTorque = Vector3.new(v1 and 100 or 15, 10, v1 and 10 or 5)
--     end
--     _shared:Message('Stabilizer: '..(v1 and 'On' or  'Off'), 1);
-- end)
Frame1:Add('Handling Modifications')
Frame1:AddToggle('Disable Max Speed', function(v1)
    _settings.Vehicle.MaxSpeed = v1 and 999;
    _client:editVehicle('MaxSpeed', tonumber(v1 and 999));
end)
Frame1:AddBox('Nitro Multiplier', function(v1)
    _settings.Vehicle.Nitro = tonumber(v1) or 1;
end)
Frame1:AddBox('Jump Multiplier', function(v1)
    _settings.Vehicle.TurboJump = tonumber(v1) and {'TurboJumpHeight', _client:getInfo()['TurboJump']['TurboJumpHeight']*tonumber(v1)};
    _client:editVehicle('TurboJump', _settings.Vehicle.TurboJump);
end)
Frame1:AddBox('Speed Multiplier', function(v1)
    _settings.Vehicle.Torque = _client:getInfo()['Torque']['force']*(tonumber(v1) or 1);
    _client:editVehicle('Torque', _client:getInfo()['Torque']['force']*(tonumber(v1) or 1));
end)
Frame1:AddBox('Brake Multiplier', function(v1)
    _settings.Vehicle.Braking = _client:getInfo()['Braking']['force']*(tonumber(v1) or 1);
    _client:editVehicle('Braking', _client:getInfo()['Braking']['force']*(tonumber(v1) or 1));
end)
Frame1:AddBox('Steer Multiplier', function(v1)
    _settings.Vehicle.SteeringRate = 0.3*(tonumber(v1) or 1)
    _client:editVehicle('SteeringRate', 0.3*(tonumber(v1) or 1))
end)
Frame1:AddBox('Friction Multiplier', function(v1)
    _settings.Vehicle.FrictionRoad = _client:getInfo()['FrictionRoad']*(tonumber(v1) or 1);
    _settings.Vehicle.FrictionOffRoad = _client:getInfo()['FrictionOffRoad']*(tonumber(v1) or 1);
    _client:editVehicle('FrictionRoad', _client:getInfo()['FrictionRoad']*(tonumber(v1) or 1));
    _client:editVehicle('FrictionOffRoad', _client:getInfo()['FrictionOffRoad']*(tonumber(v1) or 1));
end)
Frame1:AddBox('Gravity Multiplier', function(v1)
    game.Workspace.Gravity = 196.2*(tonumber(v1) or 1);
end)

-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Vehicle Cheats'})

Frame2:Add('Income Cheats')
local _button
Frame2:AddToggle('Auto Farm (crates)', function(v1)
    _settings.Vehicle.Farm3 = v1
    _shared:Message('Crate Farm: '..(v1 and 'On' or 'Off'), 1);
    if v1 then
        -- if not _settings.Vehicle.Rendered then
        --     _shared:Message('Crate Farm: Rendering World (please be patient)', 30);
        --     _button:Fire();
        --     _shared:Message('Crate Farm: Rendering Complete', 2);
        -- end
        repeat wait()
            local _crate = game.Workspace:FindFirstChild('Beep', true)
            if _crate and not _crate:IsDescendantOf(game.Workspace.Drones) then
                print('CRATE GRAB: ', _crate:GetFullName())
                firetouchinterest(_plr.Character:WaitForChild('Head'), _crate.Parent, 0);
                _shared:Message('Crate Farm: Crate Collected', 2)
                _settings.Stats.Crates += 1;
                wait(2)
            end
        until not _settings.Vehicle.Farm3
    end
end)
Frame2:AddToggle('Auto Farm (race)', function(v1)
    local _public = false;
    _settings.Vehicle.Farm = v1;
    _shared:Message('Auto Farm: '..(v1 and 'On' or 'Off'), 1);
    if v1 then
        repeat wait()
            if _shared:Safe() then
                repeat wait() _shared:Clean() until _client:getVehicle() or not _settings.Vehicle.Farm;
                if _client:getVehicle() then
                    if _shared:findRace() and _public then
                        game.ReplicatedStorage['Game Modes V2'].Shared.Remotes.RemoteFunctions.join_mode:InvokeServer(tonumber(_shared:findRace().Name));
                    else
                        game.ReplicatedStorage['Game Modes V2'].Shared.Remotes.RemoteFunctions.join_mode:InvokeServer(16);
                    end
                    _shared:Message('Auto Farm: Race Joined', 5);
                    repeat wait() until not _shared:Safe() or (not _shared:getRacing() and not _shared:getQueued());
                end
            else
                _shared:Message('Auto Farm: !!!WARNING!!! RACE PREVENTED (ADMIN IN SERVER)', 5);
                _settings.Stats.Saves_1 += 1;
                repeat wait() _shared:Clean() until _shared:Safe() or not _settings.Vehicle.Farm;
                if _shared:Safe() then
                    _shared:Message('Auto Farm: !!!WARNING!!! RACE RESUMED (ADMIN LEFT SERVER)', 5);
                end
            end
        until not _settings.Vehicle.Farm;
    end
end)
Frame2:AddToggle('Auto Farm (mph)', function(v1)
    _settings.Vehicle.Farm2 = v1;
    _shared:Message('Auto Farm V2: '..(v1 and 'On' or 'Off'), 1);
    local _time = .2;
    if v1 then
        local _return = _client:getVehicle():WaitForChild('Chassis').VehicleSeat.CFrame;
        local _bodyVelocity = Instance.new('BodyVelocity', _client:getVehicle().Chassis.VehicleSeat);
        local _look = _client:getVehicle().Chassis.VehicleSeat.CFrame.LookVector;

        _bodyVelocity.Velocity = Vector3.new(_look.X*1000, -1, _look.Z*1000);
        _bodyVelocity.MaxForce = Vector3.new(math.huge,math.huge,math.huge);
        repeat wait(_time)
            if _client:getVehicle() and _settings.Vehicle['Farm2'] and not _shared:getRacing() and _shared:Safe() then
                _bodyVelocity.MaxForce = Vector3.new(math.huge,math.huge,math.huge);
                _client:Teleport(_return);
            else
                if not _shared:Safe() then       
                    _shared:Message('Auto Farm V2: !!!WARNING!!! DRIVING PREVENTED (ADMIN IN SERVER)', 5);
                    _settings.Stats.Saves_2 += 1;
                    _client:Teleport(_return);
                    _bodyVelocity.Velocity = Vector3.new(0,-1,0);
                    wait(1)
                    _bodyVelocity.MaxForce = Vector3.new();
                    repeat wait() until _shared:Safe() or not _settings.Vehicle.Farm2;
                    if _settings.Vehicle.Farm2 then
                        _shared:Message('Auto Farm V2: !!!WARNING!!! DRIVING RESUMED (ADMIN LEFT SERVER)', 5);
                        _bodyVelocity.Velocity = Vector3.new(_look.X*1000, -1, _look.Z*1000);
                    end
                end
                if _shared:getRacing() then
                    _bodyVelocity.MaxForce = Vector3.new();
                end
            end
        until not _settings.Vehicle.Farm2
        if _client:getVehicle() then
            _bodyVelocity.MaxForce = Vector3.new(math.huge,math.huge,math.huge);
            _bodyVelocity.Velocity = Vector3.new(0,-1,0);
            _client:Teleport(_return);
            wait(1)
            _bodyVelocity:Destroy();
        end
    end
end)
Frame2:AddToggle('Auto Join Race', function(v1)
    _settings.Vehicle.Join = v1
    _shared:Message('Auto Join: '..(v1 and 'On' or 'Off'), 1);
    if v1 then
        repeat wait()
            if _client:getVehicle() and _shared:findRace() and not _shared:getQueued() and not _shared:getRacing() then
                _shared:Message('Auto Join: Race Joined', 5);
                game.ReplicatedStorage['Game Modes V2'].Shared.Remotes.RemoteFunctions.join_mode:InvokeServer(tonumber(_shared:findRace().Name));
                _shared:Clean();
            end
        until not _settings.Vehicle.Join
    end
end)
Frame2:AddToggle('Auto Win Race', function(v1)
    _settings.Vehicle.Race = v1;
    _shared:Message('Auto Win: '..(v1 and 'On' or 'Off'), 1);
    if v1 then
        for i,v in pairs(_shared.Races:GetChildren()) do
            if v:FindFirstChild('racers') and v.racers:FindFirstChild(_plr.UserId) then
                _shared:Message('Auto Win: Race Hooked', 1);
                for i = v.racers:FindFirstChild(_plr.UserId).lap.Value, v.race_info:WaitForChild('laps').Value do
                    for i = v.racers:FindFirstChild(_plr.UserId).checkpoint.Value, #v.checkpoints:GetChildren() do     
                        _client:Teleport(v.checkpoints:FindFirstChild('Checkpoint_'..i).CFrame);
                        repeat task.wait() until not game.Workspace.CurrentCamera:FindFirstChild('Checkpoint_'..i);
                    end
                end
            end
        end
    end
end)
Frame2:Add('Vehicle Cheats')
Frame2:AddToggle('Inf Nitro', function(v1)
    _settings.Vehicle.InfNitro = v1;
end)
Frame2:AddToggle('Inf Jump', function(v1)
    _settings.Vehicle.InfJump = v1;
end)
Frame2:AddToggle('Pause Vehicle', function(v1)
    _settings.Vehicle.Pause = v1;
    _shared:Message('Pause: '..(v1 and 'On' or 'Off'), 1);
    if v1 then
        repeat wait()
            if _client:getVehicle() then
                _client:getVehicle().Bodykit.CenterOfMass.Anchored = true;
            end
        until not _settings.Vehicle.Pause
        if _client:getVehicle() then
            _client:getVehicle().Bodykit.CenterOfMass.Anchored = false;
        end
    end
end)
Frame2:AddButton('Enter Vehicle', function()
    if _client:ownedVehicle() and not _client:isInVehicle() then
        _shared:enterVehicle(_client:ownedVehicle());
    elseif not _client:ownedVehicle() then
        _shared:Message('Error: No Vehicle To Enter', 1);
    elseif _client:isInVehicle() then
        _shared:Message('Error: Already Inside Vehicle', 1);
    end
end)
Frame2:AddButton('Open Autoshop', function()
    _shared:Message('Autoshop Opened', 1)
    _plr.PlayerGui.Autoshop.open_autoshop:Invoke();
end)
Frame2:AddButton('Voidz Anti-AFK', function() -- ADD HOOKED CHECK
    if not _settings.Vehicle.Afk then
        _settings.Vehicle.Afk = true;
        loadstring(game:HttpGet(('https://raw.githubusercontent.com/RTrade/Voidz/main/AntiAFK.lua'),true))();
        _shared:Message('Anti-AFK: Hooked', 1);
    else
        
        _shared:Message('Anti-AFK: Error (Already Hooked)', 1);
    end
end)
Frame2:AddButton('Unlock All Gamepasses', function()
    require(game.Players.LocalPlayer.PlayerGui.Phone.Frame.Screen.Apps.Perks.AppModule).owns_pass = function() return true end;
    _shared:Message('Gamepasses Unlocked', 3);
end)

Frame2:AddButton('Script Status', function()
    local _time = 3;
    _shared:Message('', _time);
    _shared:Message('Script Time Active: ' .. math.round(tick() - _settings.Stats.Time), _time);
    _shared:Message('Crates Collected By Script: ' .. _settings.Stats.Crates, _time);
    _shared:Message('Races Joined Script: ' .. _settings.Stats.Races, _time);
    _shared:Message('Bans Prevented By Script (race): ' .. _settings.Stats.Saves_1, _time);
    _shared:Message('Bans Prevented By Script (mph): ' .. _settings.Stats.Saves_2, _time);
    _shared:Message('', _time);
end)

-- // GUI Frame 3 // --
local Frame3 = library:AddFrame({name='Vehicle Teleports'})
local _locations = {
    Dealers = {
        ['Supercars'] = CFrame.new(Vector3.new(3724, 216, -1273));
        ['Edison'] = CFrame.new(Vector3.new(6021, 216, -1946));
        ['Aquatic'] = CFrame.new(Vector3.new(6156.5, 211, -2509.5));
        ['Spawn'] = CFrame.new(Vector3.new(5120.51, 215.923, -1852.61));
        ['JDM'] = CFrame.new(Vector3.new(286, 216, -653));
    };
    Races = {
        ['Airport'] = CFrame.new(Vector3.new(5441.02588, 214.310257, -4167.35645));
        ['Highway'] = CFrame.new(Vector3.new(4322.31006, 215.750015, 399.938232));
        ['Around The World'] = CFrame.new(Vector3.new(6105.71143, 214.950027, -57.3631325));
        ['Quarter Mile'] = CFrame.new(Vector3.new(3996.94946, 215.784073, 988.677612));
        ['Race Track'] = CFrame.new(Vector3.new(1890.61926, 215.312576, -4068.9646));
        ['Arena'] = CFrame.new(Vector3.new(1633.85046, 215.312424, -306.367859));
    };
    Views = {
        ['Tower'] = CFrame.new(Vector3.new(3585.72656, 794.092651, -1486.21826));
        ['Mountain'] = CFrame.new(Vector3.new(522.728, 588.006, -3713.11));
        ['Dock'] = CFrame.new(Vector3.new(6592, 226.5, -1164));
    };
    Render = {
        [1] = CFrame.new(Vector3.new(-555, 215, -1100)); -- city
        [2] = CFrame.new(Vector3.new(233, 256, -2045)); -- city 2
        [3] = CFrame.new(Vector3.new(-1537, 477, -1054)); -- city 3
        [4] = CFrame.new(Vector3.new(3399, 216, -3248)); -- city 4
        [5] = CFrame.new(Vector3.new(-1863, 233, -3948)); -- hills
        [6] = CFrame.new(Vector3.new(3274, 216, -4868)); -- farm
        [7] = CFrame.new(Vector3.new(1184, 216, -5346)); -- farm2
        [8] = CFrame.new(Vector3.new(2018, 213, -2605)); -- canal
        [9] = CFrame.new(Vector3.new(2500, 215, -322)); -- arena
        [10] = CFrame.new(Vector3.new(6387, 329, -4240)); -- cargo
        [11] = CFrame.new(Vector3.new(-1084.17, 215.73, -2615.42)); -- Ocean Sprint
        [12] = CFrame.new(Vector3.new(4122, 216, -4046)); -- Motorcycle
        [13] = CFrame.new(Vector3.new(3192, 219, 751)); -- desert
        [14] = CFrame.new(Vector3.new(-186, 232, 974)); -- desert2
        [15] = CFrame.new(Vector3.new(-2039, 252, 413)); -- desert2
        [16] = CFrame.new(Vector3.new(-1835, 214, -681)); -- shop
        [17] = CFrame.new(Vector3.new(-2052, 336, -2996)); -- bridge
        [18] = CFrame.new(Vector3.new(-175, 387, -3672)); -- lab
        [19] = CFrame.new(Vector3.new(2001, 235, -1123)); -- dentist
        [20] = CFrame.new(Vector3.new(4371, 169, -1794)); -- lake
        [21] = CFrame.new(Vector3.new(4446, 202, -2856)); -- canal2
        [22] = CFrame.new(Vector3.new(-164, 248, -4952)); -- grass
        [23] = CFrame.new(Vector3.new(5212, 341, 1624)); -- desert3
        [24] = CFrame.new(Vector3.new(-36, 233, -2734)); -- lake2
        [25] = CFrame.new(Vector3.new(4442, 265, -3535)); -- roof
    }
}
_button = Frame3:AddButton('Render World', function()
    if _client:isInVehicle() then
        local _pos = _client:getVehicle().Chassis.VehicleSeat.CFrame;
        _settings.Vehicle.Rendered = true;
        for i,v in pairs(_locations) do
            for i2,v2 in pairs(v) do
                _client:Teleport(v2 + Vector3.new(0, 10, 0))
                wait(.5)
            end
        end
        _client:Teleport(_pos + Vector3.new(0,1,0))
    end
end)
for i,v in pairs(_locations) do
    if i ~= 'Render' then
        Frame3:Add(i)
        for i2,v2 in pairs(v) do
            Frame3:AddButton(i2, function()
                if _client:isInVehicle() then
                    _client:Teleport(v2 + Vector3.new(0,10,0));
                    _shared:Message('Teleport: Success', 1);
                else
                    _shared:Message('Teleport: Error (Must Be Inside Vehicle)', 3);
                end
            end)
        end
    end
end

-- // Keybinds // --
uis.InputBegan:Connect(function(key)
    if key.KeyCode == Enum.KeyCode.RightShift then
        library:Toggle()
    elseif key.KeyCode == Enum.KeyCode.P then
        library:Toggle()
    elseif key.KeyCode == Enum.KeyCode.X and _settings.Vehicle.InfJump then
        if _client:isInVehicle() and _client:getVehicle().Variables.InAirAverage.Value then
            local _new = Instance.new('BodyVelocity', _client:getVehicle().Chassis.VehicleSeat);
            -- _old.MaxForce = Vector3.new(0,0,0);
            -- _old.Velocity = Vector3.new(0,0,0);
            _new.MaxForce = Vector3.new(0,math.huge,0)
            _new.Velocity = Vector3.new(0,25*_settings.Vehicle.Jump,0);
            wait(0.2);
            _new:Destroy();
        end
    elseif key.KeyCode == Enum.KeyCode.Z then
        _client:Teleport(_plr:GetMouse().Hit);
    end
end)

-- // Metatables // --
m = getrawmetatable(game)
old_Index = m.__index
oldnc = m.__namecall
oldnw = m.__newindex
oldc = m.__call

setreadonly(m, false)

m.__newindex = function(t, k, v)
    if tostring(t) == 'JumpForce' and k == 'Velocity' then
        v = Vector3.new(v.X, v.Y*_settings.Vehicle.Jump, v.Z);
    elseif tostring(t) == 'Nitro' and k == 'Force' then
        v = v*_settings.Vehicle.Nitro;
    elseif tostring(t) == 'Maxed' and k == 'Force' and _settings.Vehicle['MaxSpeed'] ~= false then
        v = Vector3.new();
    elseif (tostring(t) == 'RotateX' or tostring(t) == 'RotateY') and k == 'Torque' then
        v = v*_settings.Vehicle.Rotate;
    elseif tostring(t) == 'NitroAmount' and k == 'Value' and _settings.Vehicle.InfNitro then
        return 75;
    end
    pcall(function() return oldnw(t, k, v) end)
end
m.__namecall = function(self, ...)
    local args = {...}
    if getnamecallmethod() == 'InvokeServer' then
        if tostring(self) == 'seat_player' and tostring(args[1]) == 'VehicleSeat' then
            -- PLAYER ENTERED VEHICLE
            spawn(function()
                _client:onEnter();
            end)
        end

    end
    
    return oldnc(self, unpack(args))
end

-- // Checkpoint spy // --
_shared.Races.ChildAdded:connect(function(c)
    if c:WaitForChild('racers'):WaitForChild(_plr.UserId,5) then
        -- joined race
        if _settings.Vehicle.Farm or _settings.Vehicle.Join then
            _settings.Stats.Races +=1;
        end
        if (_settings.Vehicle.Race or _settings.Vehicle.Farm) then
            _shared:Message('Auto Win: Race Hooked', 3);
            repeat task.wait() until _plr.PlayerGui.RaceCountdown.Center.Go.Go.TextLabel.TextTransparency ~= 1
            for i = 1, c.race_info.laps.Value do
                for i2 = 1, #c.checkpoints:GetChildren() do
                    repeat task.wait()
                        _client:Teleport(c.checkpoints:FindFirstChild('Checkpoint_'..i2).CFrame);
                    until not game.Workspace.CurrentCamera:FindFirstChild('Checkpoint_'..i2);
                end
            end
        end
    end
end)

_client:initialize()