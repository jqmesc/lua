-- game https://www.roblox.com/games/388599755/POLYGUNS

local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local message = main_module['Message']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')

local _plr = game.Players.LocalPlayer

local _client = { }
local _shared = { 
    EspFolder = { };
    AimFolder = { };
    WeaponInfo = game.ReplicatedStorage.Previews.Weapons;
    Modules = game.ReplicatedStorage.Modules;
}

local _settings = {
    gun_mods = {
        Mode = 'Default';
        Ammo = false;
        Recoil = false;
        Spread = false;
        Reload = false;
        Delay = false;
    };
    fly = false;
    sprint = false;
    jump = false;
    walls = false;
}

-- // Functions // --
function _shared:GetEnemyTeam()
    local _enemies = { }
    for i,v in pairs(game.Players:GetChildren()) do
        if v ~= _plr and (v.TeamColor ~= _plr.TeamColor or tostring(v.TeamColor) == 'White') then
            table.insert(_enemies, v)
        end
    end
    return _enemies
end
function _shared:ClearFolders()
    for i,v in pairs(self.AimFolder) do
        table.remove(self.AimFolder, i)
    end
    for i,v in pairs(self.EspFolder) do
        self.EspFolder[i] = nil
    end
    --print('folders cleared')
end
function _shared:UpdatedFolders()
    _shared:ClearFolders()
    for i,v in pairs(_shared:GetEnemyTeam()) do
        if v.Character then
            _shared.EspFolder[v.Character] = v.Character
            table.insert(_shared.AimFolder, v.Character)
            --print('enemy player ' .. v.Name .. ' inserted')
        end
    end
    --warn('folders updated')
end
function _shared:KillPlayer(v1)
    if v1 and v1.Character then
        repeat wait()
            require(self.Modules.RemoteModule).Fire('Hit', v1.Character.Head)
        until v1.Character.Humanoid.Health <= 0
    end
end
function _client:EditCurrentWeapon(v1, v2)
    local _currentWeapon = _plr.Character:FindFirstChildOfClass('Tool')
    local _gunData = require(_currentWeapon.Config)
    local _gunInfo = require(_shared.WeaponInfo:FindFirstChild(_currentWeapon.Name).Config)

    _gunData[v1] = v2 and tostring(v2):lower() ~= 'default' and v2 or _gunInfo[v1]
end
function _client:UpdateWeapons()
    if _settings.gun_mods['Recoil'] then
        self:EditCurrentWeapon('Recoil', 0)
    end
    if _settings.gun_mods['Spread'] then
        self:EditCurrentWeapon('Spread', 0)
    end
    if _settings.gun_mods['Delay'] then
        self:EditCurrentWeapon('FireRate', 1000)
    end
    if _settings.gun_mods['Reload'] then
        self:EditCurrentWeapon('ReloadTime', 0)
    end
    if _settings.gun_mods['Mode'] == 'Auto' then
        self:EditCurrentWeapon('Automatic', true)
    end
    if _settings.gun_mods['Mode'] == 'Auto' then
        self:EditCurrentWeapon('Speeds', {None = 1,Sprint = 3,Reload = 1,Aim = 0.5})
    end
    
    print('gun mods fixed')
end

-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Gun Hax'})

Frame1:AddToggle('Inf Ammo', function(v1)
    _settings.gun_mods.Ammo = v1
end)
Frame1:AddToggle('Disable Recoil', function(v1)
    _settings.gun_mods.Recoil = v1
    _client:EditCurrentWeapon('Recoil', v1 and 0)
end)
Frame1:AddToggle('Disable Spread', function(v1)
    _settings.gun_mods.Spread = v1
    _client:EditCurrentWeapon('Spread', v1 and 0)
end)
Frame1:AddToggle('Disable Fire Delay', function(v1)
    _settings.gun_mods.Delay = v1
    _client:EditCurrentWeapon('FireRate', v1 and 1000)
end)
Frame1:AddToggle('Insta Reload', function(v1)
    _settings.gun_mods.Reload = v1
    _client:EditCurrentWeapon('ReloadTime', v1 and 0)
end)
Frame1:AddSwitch('Fire Mode', {'Default', 'Auto', 'Semi'}, function(v1)
    _settings.gun_mods.Mode = v1
    _client:EditCurrentWeapon('Automatic', v1=='Auto' and true or v1=='Semi' and false)
end)

-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Plr Hax'})

local _esp
Frame2:AddToggle('Esp', function(v1)
    if v1 then
        _esp = esp.new({folder=_shared.EspFolder,color=Color3.fromRGB(255,0,0)})
        _shared:UpdatedFolders()
    else
        _esp:Remove()
    end
end)

local _aimbot
Frame2:AddToggle('Aimbot', function(v1)
    if v1 then
        _aimbot = aimbot.new({folder=_shared.AimFolder,smoothness=.5})
        _shared:UpdatedFolders()
    else
        _aimbot:Remove()
    end
end)
Frame2:AddToggle('Super Sprint', function(v1)
    _settings.sprint = v1
    _client:EditCurrentWeapon('Speeds', v1 and {None = 1,Sprint = 3,Reload = 1,Aim = 0.5})
end)
Frame2:AddToggle('Super Jump', function(v1)
    _settings.jump = v1
end)
Frame2:AddButton('Kill Enemies', function(v1)
    for i,v in pairs(_shared:GetEnemyTeam()) do
        _shared:KillPlayer(v)
    end
end)


-- // GUI Frame 3 // --
local Frame3 = library:AddFrame({name='Env Hax'})

Frame3:AddButton('Collect Crates', function()
    local _pos = _plr.Character.HumanoidRootPart.CFrame

    for i,v in pairs(game.Workspace.Crates:GetChildren()) do
        _plr.Character.HumanoidRootPart.CFrame = v.Part.CFrame
        wait(0.1)
    end
    _plr.Character.HumanoidRootPart.CFrame = _pos
end)
Frame3:AddToggle('Wallhacks', function(v1)
    _settings.walls = v1
end)
Frame3:AddBox('Gravity', function(v1)
    game.Workspace.Gravity = tonumber(v1) or 196.2
end)

-- // Metatables // --
m = getrawmetatable(game)
old_Index = m.__index
oldnc = m.__namecall
oldnw = m.__newindex
oldc = m.__call

setreadonly(m, false)

m.__newindex = function(t, k, v)
    if tostring(t) == 'Ammo' and k == 'Value' then
        if _settings.gun_mods.Ammo then
            v = require(_shared.WeaponInfo:FindFirstChild(t.Parent.Name).Config).MagazineSize
        end
    elseif tostring(t) == 'Humanoid' and k == 'JumpPower' then
        if _settings.jump then
            v = 300
        end
    end
    return oldnw(t, k, v)
end

m.__namecall = function(self, ...)
    local args = {...}

    if getnamecallmethod() == 'FindPartOnRayWithIgnoreList' then
        if args[2] and type(args[2]) == 'table' and _settings.walls then
            table.insert(args[2], game.Workspace.Map)
        end
    end

    return oldnc(self, unpack(args))
end

-- // Plr spawn // --
game.Workspace.ChildAdded:connect(function(c)
    if c:WaitForChild('Humanoid') then
        if c == _plr.Character then
            repeat wait() until _plr.Character:FindFirstChildOfClass('Tool')
            _client:UpdateWeapons()
        end
        _shared:UpdatedFolders()
    end
end)

message.new({msg='Script Loaded, Credits to Sinsane (jaames#9911)'})