-- game https://www.roblox.com/games/3204503125/2X-XP-Impulse-Remastered

local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local message = main_module['Message']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')

local _plr = game.Players.LocalPlayer

local _client = { 
    network = require(game.ReplicatedStorage.Modules).network;
    utility = require(game.ReplicatedStorage.Modules).utility;
}
local _shared = {
    EspFolder = { };
    AimFolder = { };
 }

local _settings = { 
    gun_mods = {
        Ammo = false;
        Reload = false;
        Recoil = false;
        Delay = false;
        Dmg = false;
        Range = false;
    };
    Mode = 'Default';
    God = false;
}

-- // Functions // --
function _shared:GetEnemyTeam()
    local _enemies = { }
    for i,v in pairs(game.Players:GetChildren()) do
        if v ~= _plr then
            table.insert(_enemies, v)
        end
    end
    return _enemies
end
function _shared:ClearFolders()
    local _ignoreList = getupvalue(require(game.ReplicatedStorage.Modules.Weapon).fire, 7)
    for i,v in pairs(self.AimFolder) do
        table.remove(self.AimFolder, i)
    end
    for i,v in pairs(self.EspFolder) do
        self.EspFolder[i] = nil
    end
    for i,v in pairs(_ignoreList) do
        if game.Players:FindFirstChild(tostring(v)) then
            table.remove(_ignoreList, table.find(_ignoreList, v))
        end
    end
    --print('folders cleared')
end
function _shared:UpdatedFolders()
    _shared:ClearFolders()
    for i,v in pairs(_shared:GetEnemyTeam()) do
        if v.Character then
            _shared.EspFolder[v.Character] = v.Character
            table.insert(_shared.AimFolder, v.Character)
            table.insert(getupvalue(require(game.ReplicatedStorage.Modules.Weapon).fire, 7), v.Character)
            --print('enemy player ' .. v.Name .. ' inserted')
        end
    end
    --warn('folders updated')
end
function _client:Message(v1, v2)
    spawn(function()
        require(game.ReplicatedStorage.Modules).gui.alert_message(v1, v2 and v2)
    end)
end
function _client:EditCurrentWeapons(v1, v2)
    for i,v in pairs(game.ReplicatedStorage.Weapons:GetChildren()) do
        local _mods = require(v)
        if not _mods['info'] then
            local _info = { }
            for i,v in pairs(_mods) do
                _info[i]=v
            end
            _mods['info'] = _info
        end

        local _info = _mods['info']
        _mods[v1] = (v2~=nil or tostring(v2):lower() ~= 'default') and v2 or _info[v1]
        print(v1, 'set to', v2 or _info[v1])
    end
end
function _client:SwapWeapon(v1)
    require(game.ReplicatedStorage.Modules.Weapon).set(v1, true)
end
function _client:Shoot()
    require(game.ReplicatedStorage.Modules.Weapon).fire(tick(), false, nil)
end

-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Gun Hax'})

Frame1:AddToggle('Wallhacks', function(v1)
    _settings.gun_mods.Walls = v1

    local _ignoreList = getupvalue(require(game.ReplicatedStorage.Modules.Weapon).fire, 7)
    local _currentMap = game.Workspace.Map:GetChildren()[1]

    if v1 and _currentMap then
        if table.find(_ignoreList, _currentMap['Play Area']) then
            table.remove(_ignoreList, table.find(_ignoreList, _currentMap['Play Area']))
        end
        if table.find(_ignoreList, _currentMap['Props']) then
            table.remove(_ignoreList, table.find(_ignoreList, _currentMap['Props']))
        end
        for i,v in pairs(_shared:GetEnemyTeam()) do
            table.insert(_ignoreList, v.Character)
        end
    elseif not v1 then
        for i,v in pairs(_ignoreList) do
            table.remove(_ignoreList, i)
        end
        _ignoreList = {
            [1]=_currentMap['Glass'];
            [2]=_currentMap['Play Area'];
            [3]=_currentMap['Props']
        }
    end
end)
Frame1:AddToggle('Inf Ammo', function(v1)
    _settings.gun_mods.Ammo = v1
    _client:EditCurrentWeapons('max_ammo', v1 and math.huge)
end)
Frame1:AddToggle('Inf Dmg', function(v1)
    _settings.gun_mods.Dmg = v1
    _client:EditCurrentWeapons('damage', v1 and 999)
end)
Frame1:AddToggle('Inf Range', function(v1)
    _settings.gun_mods.Range = v1
    _client:EditCurrentWeapons('range', v1 and 9e9)
end)
Frame1:AddToggle('Insta Reload', function(v1)
    _settings.gun_mods.Reload = v1
    _client:EditCurrentWeapons('reload_time', v1 and {Min=0,Max=0})
    _client:EditCurrentWeapons('reload', v1 and {})
end)
Frame1:AddToggle('Disable Recoil', function(v1)
    _settings.gun_mods.Recoil = v1
    _client:EditCurrentWeapons('recoil', v1 and 0)
end)
Frame1:AddToggle('Disable Fire Delay', function(v1)
    _settings.gun_mods.Delay = v1
    _client:EditCurrentWeapons('cooldown', v1 and 0.01)
end)
Frame1:AddSwitch('Fire Mode', {'Default', 'Auto', 'Semi'}, function(v1)
    _settings.gun_mods.Mode = v1
    _client:EditCurrentWeapons('automatic', (v1=='Auto' and true) or (v1=='Semi' and false))
end)

-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Plr Hax'})

local _esp
Frame2:AddToggle('Esp', function(v1)
    if v1 then
        _esp = esp.new({folder=_shared.EspFolder,color=Color3.fromRGB(255,0,0)})
        _shared:UpdatedFolders()
    else
        _esp:Remove()
    end
end)

local _aimbot
Frame2:AddToggle('Aimbot', function(v1)
    if v1 then
        _aimbot = aimbot.new({folder=_shared.AimFolder, smoothness=3})
        _shared:UpdatedFolders()
    else
        _aimbot:Remove()
    end
end)

Frame2:AddToggle('God Mode', function(v1)
    -- epic hax
    _settings.God = v1
    if v1 then
        repeat wait() 
            if _plr.Character and _plr.Character:FindFirstChild('Humanoid') then
                local _humanoid = _plr.Character:FindFirstChild('Humanoid')
                local _maxHealth = 999

                if _humanoid.Health < _maxHealth then
                    _client.network.send('hit', _plr.Character.HumanoidRootPart, -(_maxHealth - _humanoid.Health))
                end
            end
        until not _settings.God
        if _plr.Character and _plr.Character:FindFirstChild('Humanoid') then
            local _humanoid = _plr.Character:FindFirstChild('Humanoid')
            _client.network.send('hit', _plr.Character.HumanoidRootPart, _humanoid.Health - _humanoid.MaxHealth)
        end
    end 
end)

Frame2:AddButton('Disable Lens Flare', function(v1)
    _plr.PlayerGui.LensFlare.Enabled = false
end)

Frame2:AddBox('Speed Multiplier', function(v1)
    _client:EditCurrentWeapons('weight', 1 - tonumber(v1) or 0)
end)

-- // GUI Frame 3 // --
local Frame3 = library:AddFrame({name='Env Hax'})

Frame3:AddButton('Kill All', function() -- HOOK HIT PLAYER NETWORK
    for i,v in pairs(game.Players:GetChildren()) do
        if v ~= _plr and v.Character and v.Character:FindFirstChild('Humanoid') then
            _client.network.send('hit', v.Character.Head, 100)
            wait(0.5)
        end
    end
end)
Frame3:AddButton('Break Glass', function()
    for i,v in pairs(game.Workspace.Map:GetChildren()[1]['Glass']:GetChildren()) do
        _client.utility.fragment(v, v.Position, Vector3.new())
    end
end)

-- // Char spawn // --
game.Workspace.ChildAdded:connect(function(child)
    if child:WaitForChild('Humanoid', 1) then
        if child ~= _plr.Character then
            --local _player = game.Players:FindFirstChild(child.Name)
            --if child:FindFirstChild('Head') then
                --print('enemy spawned')
                _shared:UpdatedFolders()
                -- if _settings.bighead then
                --     child:WaitForChild('Head').Size = Vector3.new(10,10,10)
                -- end
            --end
            return
        end
    -- elseif child.Name == 'Map' then
    --     if _settings.walls then
    --         print('added map to ignore list')
    --         child.Parent = game.Workspace.IgnoreList
    --     end
    --     if _settings.barrier then
    --         print('new barriers disabled')
    --         if child:WaitForChild('barrierwalls') then
    --             for i,v in pairs(child.barrierwalls:GetChildren()) do
    --                 v.CanCollide = false
    --                 v.Transparency = 0.9
    --                 v.Color = Color3.fromRGB(255,0,0)
    --             end 
    --         end
    --     end
    end
end)

-- // Flaire // --
_client:Message('Script Loaded, Credits to Sinsane (jaames#9911)')

_shared:UpdatedFolders()
_client:SwapWeapon(3)
wait(.2)
_client:Shoot()
wait(.2)
_client:SwapWeapon(1)