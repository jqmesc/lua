-- game https://www.roblox.com/games/6055959032/Jailbird-Beta-17-0

local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')

warn('waiting for player')
repeat wait() until game.Players.LocalPlayer
warn('wait for team')
repeat wait() until game.Players.LocalPlayer.Team ~= game.Teams.Spectator
warn('waiting for client')
repeat wait() until game.Players.LocalPlayer.Character
warn('waiting for map')
repeat wait() until #game.Workspace.Map:GetChildren() > 0

local _plr = game.Players.LocalPlayer

_client = {
    serverData = _plr:WaitForChild('ServerData');
    Alive = _plr:WaitForChild('ServerData').Alive.Value;
    Team = _plr.Team;
}
_shared = { 
    espfolder = { };
    aimfolder = { };
    currentmap = game.Workspace.Map:FindFirstChildOfClass('Model');
    events = game.ReplicatedStorage.GameEvents;
    events2 = game.ReplicatedStorage.Engine.Eventos;
    modules = game.ReplicatedStorage.Modules;
    modules2 = game.ReplicatedStorage.Engine.Modulos;
    systemdata = game.ReplicatedStorage.GameSystemData;
}
local _settings = { 
    sprint = 1;
    defenderzones = false;
    teamkill = false;
    gun_mods =  {
        Wallbang = false;
        NoRecoil = false;
        NoSpread = false;
        NoDelay = false;
        InstaReload = false;
        InfAmmo = false;
        InfDmg = false;
        FireMode = 'default';
    }
}

function _shared:ClearFolders()
    for i,v in pairs(self.aimfolder) do
        table.remove(self.aimfolder, i)
    end
    for i,v in pairs(self.espfolder) do
        self.espfolder[i] = nil
    end
    --print('folders cleared')
end
function _shared:KillPlayer(v1)
    if v1.Character then
        spawn(function()
            repeat -- brute force until player is dead
                local _hitPos1 = {HitPosition=v1.Character.Head.Position, CamPosition=v1.Character.Head.Position + Vector3.new(1,0,0)} -- checking for multiple bullet angles
                local _hitPos2 = {HitPosition=v1.Character.Head.Position, CamPosition=v1.Character.Head.Position + Vector3.new(0,1,0)}
                local _hitPos3 = {HitPosition=v1.Character.Head.Position, CamPosition=v1.Character.Head.Position + Vector3.new(0,0,1)}

                self.events2.Damage:FireServer(v1.Character.Humanoid, 110, '', _hitPos1)
                self.events2.Damage:FireServer(v1.Character.Humanoid, 110, '', _hitPos2)
                self.events2.Damage:FireServer(v1.Character.Humanoid, 110, '', _hitPos3)
            wait() until not v1.Character or v1.Character.Humanoid.Health <= 0
        end)
    end
end
function _client:GetWeaponInfo(v1)
    for i,v in pairs(game.ReplicatedStorage.Weapons:GetChildren()) do
        if v.Name == v1 then
            return require(v['ACS_Modulo']['Variaveis']['Settings'])
        end
    end
end

function _client:EditCurrentWeapon(v1, v2)
    local _currentWeapon = getupvalue(self.framework.Setup, 6)

    --print(_currentWeapon, v1, v2)

    if tostring(v2):lower() == 'default' then
        local _weaponName = _currentWeapon.Name
        local _weaponInfo = _client:GetWeaponInfo(_weaponName)

        if tostring(v1) == 'Ammo' then
            getupvalue(_client.framework.Setup, 20).Value = _weaponInfo[v1]
            return
        end
        _currentWeapon[v1] = _weaponInfo[v1]
        --setupvalue(self.framework.Setup, _upvalNum, _weaponInfo[v1])
        return
    end

    if tostring(v1) == 'Ammo' then
        getupvalue(_client.framework.Setup, 20).Value = v2
        return
    end
    _currentWeapon[v1] = v2
    --setupvalue(self.framework.Setup, _upvalNum, v2)
end
function _client:OverWriteGameFuncs()
    _shared:ClearFolders()

    self.framework = nil

    if self.Alive then
        -- [ PLAYER SPAWNED ] --
        repeat wait() until _plr.Character
        repeat wait() until _plr.Character:FindFirstChild('Saude')
        -- [ Update Variables ]
        self.framework = getsenv(_plr.Character.Saude.Client_System)
        -- [ ESP / Aimbot Folders ] --
        for i,v in pairs(game.Players:GetChildren()) do
            if v.TeamColor ~= _plr.TeamColor then
                spawn(function()
                    repeat wait() until v.Character
                    _shared.espfolder[v.Character] = v.Character
                    table.insert(_shared.aimfolder, v.Character)
                    print('enemy player added to folders', v)
                end)
            end          
        end
        -- [ Gun Mods ] --
        local _hooks =  { }
        _hooks.Recoil = hookfunc(self.framework.recoil, function(...)
            if _settings.gun_mods['NoRecoil'] then
                return
            end
            return _hooks.Recoil(...)
        end)
        _hooks.Ignore = hookfunc(self.framework.ResetRay_Ignore, function(...)

            if _settings.gun_mods['Wallbang'] then
                return
            end
            
            return _hooks.Ignore(...)
        end)
        -- [ Extras ] --
        if _settings.defenderzones and _shared.currentmap and #_shared.currentmap:FindFirstChild('DefenderZones'):GetChildren() > 0 then
            _shared.currentmap:FindFirstChild('DefenderBlocker'):ClearAllChildren()
        end
    end

    warn('game functions overwritten')
end

-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Weapon Modifications'})


Frame1:AddToggle('Wallbang', function(v1)
    _settings.gun_mods.Wallbang = v1
    if _client.Alive then
        local _ignoreList = getupvalue(_client.framework.CastRay, 8)

        if v1 then
            if not table.find(_ignoreList, _shared.currentmap) then
                table.insert(_ignoreList, _shared.currentmap)

                print('map added to ignore list')
            end
        else
            if table.find(_ignoreList, _shared.currentmap) then
                table.remove(_ignoreList, table.find(_ignoreList, _shared.currentmap))
                
                print('map removed from ignore list')
            end
        end
    end

end)
Frame1:AddToggle('No Recoil', function(v1)
    _settings.gun_mods.NoRecoil = v1
end)
Frame1:AddToggle('No Spread', function(v1)
    _settings.gun_mods.NoSpread = v1
    if _client.Alive and _plr.Character then
        _client:EditCurrentWeapon('MinSpread', v1 and 0 or 'default')
        _client:EditCurrentWeapon('MaxSpread', v1 and 0 or 'default')
    end
end)
Frame1:AddToggle('No Fire Delay', function(v1)
    _settings.gun_mods.NoDelay = v1
    if _client.Alive and _plr.Character then
        _client:EditCurrentWeapon('FireRate', v1 and 0.005 or 'default')
        _client:EditCurrentWeapon('BurstFireRate', v1 and 0.005 or 'default')
    end
end)
Frame1:AddToggle('Inf Ammo', function(v1)
    _settings.gun_mods.InfAmmo = v1
    if _client.Alive and _plr.Character then
        _client:EditCurrentWeapon('Ammo', v1 and math.huge or 'default')
    end
end)
Frame1:AddToggle('Inf Damage', function(v1)
    _settings.gun_mods.InfDmg = v1
end)
Frame1:AddToggle('Insta Reload', function(v1) -- fix
    _settings.gun_mods.InstaReload = v1
end)

Frame1:AddSwitch('Fire Mode', {'Default', 'Auto', 'Burst', 'Semi'}, function(v1)
    _settings.gun_mods.FireMode = v1
    if _client.Alive and _plr.Character then
        _client:EditCurrentWeapon('Mode', v1~='Default' and v1 or 'default')
    end
end)

-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Player Modifications'})

local _esp
Frame2:AddToggle('ESP', function(v1) -- add name tag/health tag/rak tag
    if v1 then
        _esp = esp.new({folder=_shared.espfolder,color=Color3.fromRGB(255, 0, 0)}) 
    else
        _esp:Remove()
    end
end)

local _aimbot
Frame2:AddToggle('Aimbot', function(v1)
    if v1 then
        _aimbot = aimbot.new({folder=_shared.aimfolder}) 
    else
        _aimbot:Remove()
    end
end)

Frame2:AddToggle('Disable Defender Blockers', function(v1)
    _settings.defenderzones = false
    if _client.Alive then
        _shared.currentmap:FindFirstChild('DefenderBlocker'):ClearAllChildren()
    end
end)

-- // GUI Frame 3 // --
local Frame3 = library:AddFrame({name='Environment Modifications'})

Frame3:AddToggle('Enable Teamkill', function(v1)
    _settings.teamkill = v1
    -- _plr.Team = v1 and Instance.new('Team', game.Teams) or _client.Team
    -- if not v1 then
    --     game.Teams:FindFirstChild('Team'):Destroy()
    -- end
end)

Frame3:AddButton('Kill Enemies', function()
    for i,v in pairs(game.Players:GetChildren()) do
        if v~= _plr and v.TeamColor ~= _plr.TeamColor then
            _shared:KillPlayer(v)
        end
    end
end)
Frame3:AddButton('Destroy All Doors', function()
    for i,v in pairs(_shared.currentmap:FindFirstChild('BarricadeArea'):GetChildren()) do
        spawn(function()
            for i2,v2 in pairs(v:GetChildren()) do
                require(_shared.modules2.Hitmarker).HitEffect(nil,nil,nil,v2,nil,nil,'Knife')
                _shared.events2.Hit:FireServer(nil,v2,nil,nil,'Knife')
            end
        end)
    end
end)
Frame3:AddBox('Sprint Multiplier', function(v1)
    _settings.sprint = 1*tonumber(v1) or 1
end)
Frame3:AddBox('Gravity Multiplier', function(v1)
    game.Workspace.Gravity = 196.2*tonumber(v1) or 1
end)

-- Frame3:AddButton('Barricade All Doors', function()
    
-- end)

-- // Keybinds // --
uis.InputBegan:connect(function(key)
    if key.KeyCode == Enum.KeyCode.RightShift then -- toggle library
        library:Toggle()
    elseif key.KeyCode == Enum.KeyCode.LeftShift then -- sprint speed
        if _client.Alive and _plr.Character and _plr.Character:FindFirstChild('HumanoidRootPart') and _settings.sprint ~= 1 then
            repeat wait()
                _plr.Character.HumanoidRootPart.CFrame = _plr.Character.HumanoidRootPart.CFrame + _plr.Character.HumanoidRootPart.CFrame.lookVector * (_settings.sprint - 1)
            until not uis:IsKeyDown(Enum.KeyCode.LeftShift) or _settings.sprint == 1
        end
    end
end)

-- // Metatables // --
m = getrawmetatable(game)
old_Index = m.__index
oldnc = m.__namecall
oldnw = m.__newindex
oldc = m.__call

setreadonly(m, false)

m.__index = function(t, k)
    if t ~= _plr and k == 'Team' and t.TeamColor == _plr.TeamColor then
        if _client.Alive and _settings.teamkill then
            return 'Test' -- assign fake team
        end
    end
    return old_Index(t, k)
end

m.__namecall = function(self, ...)
    local args = {...}
    if getnamecallmethod() == 'FireServer' then

        if tostring(self) == 'Equipar' then
            if _client.framework then
                print('new weapon equipped (better way to spy)', getupvalue(_client.framework.Setup, 6)['Name'])
                -- AFTER NEW GUN EQUIPPED
                if _settings.gun_mods['NoSpread'] then
                    _client:EditCurrentWeapon('MinSpread', 0)
                    _client:EditCurrentWeapon('MaxSpread', 0)
                end
                if _settings.gun_mods['NoDelay'] then
                    _client:EditCurrentWeapon('FireRate', 0.01)
                    _client:EditCurrentWeapon('BurstFireRate', 0.01)
                end
                if _settings.gun_mods['InfAmmo'] then
                    _client:EditCurrentWeapon('Ammo', math.huge)
                end
                if _settings.gun_mods['FireMode'] ~= 'default' then
                    _client:EditCurrentWeapon('Mode', _settings.gun_mods['FireMode'])
                end
                if _settings.gun_mods['Wallbang'] then
                    table.insert(getupvalue(_client.framework.CastRay, 8), _shared.currentmap)
                    print('inserted')
                end
                
                ReloadHook = hookfunc(getupvalue(_client.framework.Setup, 7).ReloadAnim, function(p37,p38,p39)  -- insta reload (game reload func without the wait)
                    if _settings.gun_mods['InstaReload'] then
                        if p39[6].Value - (p39[8].Ammo - p39[7].Value) < 0 then
                            p39[7].Value = p39[7].Value + p39[6].Value;
                            p39[6].Value = 0;
                        elseif p39[7].Value <= 0 then
                            p39[6].Value = p39[6].Value - (p39[8].Ammo - p39[7].Value);
                            p39[7].Value = p39[8].Ammo;
                            p39[9] = false;
                        elseif p39[7].Value > 0 and p39[9] and p39[8].IncludeChamberedBullet then
                            p39[6].Value = p39[6].Value - (p39[8].Ammo - p39[7].Value) - 1;
                            p39[7].Value = p39[8].Ammo + 1;
                        elseif p39[7].Value > 0 and p39[9] and not p39[8].IncludeChamberedBullet then
                            p39[6].Value = p39[6].Value - (p39[8].Ammo - p39[7].Value);
                            p39[7].Value = p39[8].Ammo;
                        end;
                        return
                    end
                    return ReloadHook(p37,p38,p39)
                end)
            end
        elseif tostring(self) == 'DefenderZone' then
            if args[1] == true then
                print('attempt spot')
                args[1] = false
            end 
        elseif tostring(self) == 'Damage' then
            if _settings.gun_mods['Wallbang'] then
                args[4].CamPosition = args[4].HitPosition + Vector3.new(0,1,0)
            end
            if _settings.gun_mods['InfDmg'] then
                args[2] = 110
            end
        end
    
    end
    
    return oldnc(self, unpack(args))
end

-- // Update Client // --
_plr.CharacterAdded:connect(function(z)
    _client:OverWriteGameFuncs()
    z.Humanoid.Died:connect(function()
        _client:OverWriteGameFuncs()
    end)
end)
game.Workspace.Map.ChildAdded:connect(function(z)
    _shared.currentmap = z
    
    warn('map updated')
end)
-- _client.serverData.Alive:GetPropertyChangedSignal('Value'):connect(function()
--     _client.Alive = _client.serverData.Alive.Value
--     if _client.Alive then
--         repeat wait() until _plr.Character
--     end
--     _client:OverWriteGameFuncs()
-- end)


--repeat wait() until _client.serverData.Alive.Value
_client:OverWriteGameFuncs()