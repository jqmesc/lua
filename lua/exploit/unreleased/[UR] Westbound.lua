-- game https://www.roblox.com/games/2474168535/Westbound

-- // Library // --
local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local functions = main_module['Functions']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local message = main_module['Message']
local Keybind = main_module['Keybind']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')


-- // Variables // --
local _plr = game.Players.LocalPlayer;

getgenv()._client = { 
    Quests = require(_plr.PlayerScripts.Quests.Modules.PlayerQuests);
};

getgenv()._shared = { 
    Quests = require(game.ReplicatedStorage.Quests.Configuration.Quests);
    Weapons = require(game.ReplicatedStorage.GunScripts.GunStats);
    Modules = game.ReplicatedStorage.SharedModules;
    AimFolder = { };
    EspFolder_1 = { };
    EspFolder_2 = { };
};

local _settings = { 
    Weapon = {
        Reload = false;
        Equip = false;
        Spread = false;
        Recoil = false;
        Ammo = false;
    };
    Player = {
        Fly = false;
        Fall = false;
        Rate = false;
        Ragdoll = false;
        InfJump = false;
        Sprint = 30;
        Jump = 45;
    };
    World = {
        
    };
    Extra = {
        Loaded = true;
    }
};


-- // Functions // --
function _client:Notification(...)
    require(_plr.PlayerScripts.NotificationModule)(...);
end
function _client:CustomShot(v1)
    self.Weapon = v1;
    local _stats = v1.GunStats;

    if _settings.Weapon['Spread'] then
        _stats.Spread = 0;
        _stats.ZoomAccuracy = 0;
        _stats.HipFireAccuracy = 0;
    end
    if _settings.Weapon['Reload'] then
        --_stats.FullReload = true;
        _stats.ReloadSpeed = 0;
    end
    if _settings.Weapon['Equip'] then
        _stats.EquipDelay = nil;
        _stats.equipTime = 0;
        _stats.prepTime = 0;
    end
    if _settings.Weapon['Ammo'] then
        v1.Shots = math.huge;
    end
    if _settings.Weapon['Rate'] then
        v1.shotDebounce = false;
        v1.Animations.Fire = {Length=0};
        v1.Animations.FanFire = {Length=0};
    end

    return v1;
end
-- function _client:EditWeapons(v1, v2)
--     for i,v in pairs(_shared.Weapons) do
--         local _stats = v;
--         if _stats[v1] then
--             if not _stats['info'] then
--                 local _info = { };
--                 for i2,v2 in pairs(v) do
--                     _info[i2]=v2;
--                 end
--                 _stats['info'] = _info;
--             end
--             local _info = _stats['info'];

--             _stats[v1] = (v2 or tostring(v2):lower() ~= 'default') and v2 or _info[v1];
--         end
--     end
-- end

function _shared:ClearFolders()
    for i,v in pairs(self.AimFolder) do
        table.remove(self.AimFolder, i)
    end
    for i,v in pairs(self.EspFolder_1) do
        self.EspFolder_1[i] = nil
    end
    for i,v in pairs(self.EspFolder_2) do
        self.EspFolder_2[i] = nil
    end
    --print('folders cleared')
end
function _shared:UpdatedFolders()
    _shared:ClearFolders()
    for i,v in pairs(game.Players:GetChildren()) do
        if v ~= _plr and v.Character then
            if tostring(v.Team) == 'Cowboys' then
                _shared.EspFolder_1[v.Character] = v.Character
            else
                _shared.EspFolder_2[v.Character] = v.Character
            end
            table.insert(_shared.AimFolder, v.Character)
            --print('enemy player ' .. v.Name .. ' inserted')
        end
    end
    --warn('folders updated')
end
-- // GUI Frame 1 // --
local Frame1 = library:AddFrame({name='Gun Hax'})

local _esp
local _esp2
Frame1:AddToggle('Esp', function(v1)
    if v1 then
        _esp = esp.new({folder=_shared.EspFolder_1,color=Color3.fromRGB(253, 234, 141),distance=true})
        _esp2 = esp.new({folder=_shared.EspFolder_2,color=Color3.fromRGB(196, 40, 28),distance=true})
        _shared:UpdatedFolders()
    else
        _esp:Remove()
        _esp2:Remove()
    end
end)

local _aimbot
Frame1:AddToggle('Aimbot', function(v1)
    if v1 then
        _aimbot = aimbot.new({folder=_shared.AimFolder,smoothness=1})
        _shared:UpdatedFolders()
    else
        _aimbot:Remove()
    end
end)

Frame1:AddToggle('Disable Recoil', function(v1) -- Toggle Recoil
    _settings.Weapon.Recoil = v1;
    --_client:EditWeapons('camShakeResist', v1 and math.huge);
end)
Frame1:AddToggle('Disable Spread', function(v1) -- Toggle Spread
    _settings.Weapon.Spread = v1;
    --_client:EditWeapons('Spread', v1 and 0);
    --_client:EditWeapons('ZoomAccuracy', v1 and 0);
    --_client:EditWeapons('HipFireAccuracy', v1 and 0);
end)
Frame1:AddToggle('Inf Ammo', function(v1) -- Toggle Ammo
    _settings.Weapon.Ammo = v1;
    if not v1 and _client.Weapon then
        _client.Weapon.Shots = _client.Weapon.GunInfo.GunStats.MaxShots;
    end
    --_client:EditWeapons('MaxShots', v1 and math.huge);
end)
Frame1:AddToggle('Max Fire Rate', function(v1)
    _settings.Weapon.Rate = v1;
end)
Frame1:AddToggle('Inf Damage', function(v1) -- Toggle Damage
    _settings.Weapon.Damage = v1;
    --_client:EditWeapons('Damage', v1 and math.huge);
end)
Frame1:AddToggle('Insta Reload', function(v1) -- Toggle Reload
    _settings.Weapon.Reload = v1;
    --_client:EditWeapons('ReloadSpeed', v1 and 0);
end)
Frame1:AddToggle('Insta Equip', function(v1) -- Toggle Equip
    _settings.Weapon.Equip = v1;
    --_client:EditWeapons('EquipDelay', v1 and 0);
    --_client:EditWeapons('equipTime', v1 and 0);
    --_client:EditWeapons('prepTime', v1 and 0);
end)
-- // GUI Frame 2 // --
local Frame2 = library:AddFrame({name='Plr Hax'})

local _fly = Frame2:AddToggle('Fly', function(v1) -- Fly
    _settings.Player.Fly = v1
    if v1 then
        local _bodyVelocity = Instance.new('BodyVelocity', _plr.Character.HumanoidRootPart)
		repeat game:GetService('RunService').RenderStepped:wait()

            if _plr.Character:FindFirstChild('HumanoidRootPart') and not _plr.Character.HumanoidRootPart:FindFirstChild('BodyVelocity') then
                _bodyVelocity = Instance.new('BodyVelocity', _plr.Character.HumanoidRootPart)
                --print('replaced body velocity')
            end
            
            local cam = game.Workspace.CurrentCamera.CFrame
			
			local v1 = Vector3.new()
			
			if uis:IsKeyDown(Enum.KeyCode.W) then
				v1 = v1 + Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.S) then
				v1 = v1 - Vector3.new(cam.LookVector.X, 0, cam.LookVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.D) then
				v1 = v1 + Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.A) then
				v1 = v1 - Vector3.new(cam.RightVector.X, 0, cam.RightVector.Z)
			end
			if uis:IsKeyDown(Enum.KeyCode.Space) then
				v1 = v1 + Vector3.new(0, 1, 0)
			end
			if uis:IsKeyDown(Enum.KeyCode.LeftAlt) then
				v1 = v1 - Vector3.new(0, .5, 0)
			end
            if uis:IsKeyDown(Enum.KeyCode.LeftShift) then
				v1 = Vector3.new(v1.X, 0, v1.Z)*10
			end

			_bodyVelocity.Velocity = v1 * 100
			
		until not _settings.Player.Fly
		_bodyVelocity:Destroy()
    end
end)
local _recent = { }
local _noclip = Frame2:AddToggle('Noclip', function(v1) -- Noclip
    local _config = {
        debounce = .1;
        size = Vector3.new(5,5,5);
        offset = Vector3.new(0,1.6,0);
        transparency = 1;
    };
    if v1 then
        local _char = _plr.Character
        local _hrp = _char:WaitForChild('HumanoidRootPart')
        local _part = Instance.new('Part', _char)
        _part.Anchored = true
        _part.CanCollide = false
        _part.Size = _config.size
        _part.Transparency = _config.transparency
        _part.CFrame = _hrp.CFrame
        
        spawn(function()
            game:GetService('RunService'):BindToRenderStep('On', Enum.RenderPriority.Camera.Value, function()
                _part.CFrame = _hrp.CFrame + _config.offset
                local _parts = game.Workspace:GetPartsInPart(_part)
    
                for i,v in pairs(_parts) do
                    if _recent[v] or (not v:IsDescendantOf(_char) and v.CanCollide == true) then
                        _recent[v] = tick()
                        v.CanCollide = false
                    end
                end
            end)
        end)
        spawn(function()
            game:GetService('RunService'):BindToRenderStep('Off', Enum.RenderPriority.Camera.Value, function()
                for i,v in pairs(_recent) do
                    if tick() - v >= _config.debounce then
                        i.CanCollide = true
                    end
                end
            end)
        end)
    else
        game:GetService('RunService'):UnbindFromRenderStep('On');
        game:GetService('RunService'):UnbindFromRenderStep('Off');
        for i,v in pairs(_recent) do
            i.CanCollide = true
        end
    end
end)
Frame2:AddToggle('Inf Jump', function(v1) -- Toggle Fall Damage
    _settings.Player.InfJump = v1;
end)
Frame2:AddToggle('Money Farm', function(v1) -- Spam Complete Quest
    _settings.Player.Farm = v1;

    local _last = {0,nil};
    if v1 then
        for i,v in pairs(_shared.Quests) do
            for i2,v2 in pairs(v) do
                if v2['Reward'] and v2.Reward['Money'] and v2.Reward.Money > _last[1] then
                    _last[1] = v2.Reward.Money;
                    _last[2] = v2;
                end
            end
        end
        repeat wait()
            _client.Quests.ActivateQuest('Tutorial', _last[2].Id, _last[2].Name, nil)
            _client.Quests.TurnInQuest(game.Players.LocalPlayer, 'Tutorial', _last[2], false)
        until not _settings.Player.Farm;
    end
end)
Frame2:AddButton('Complete All Quests', function() -- Activate/Complete Quests
    for i,v in pairs(_shared.Quests) do
        for i2,v2 in pairs(v) do
            _client.Quests.ActivateQuest(i, v2.Id, v2.Name, nil)
            _client.Quests.TurnInQuest(game.Players.LocalPlayer, i, v2, false)
        end
    end
end)
Frame2:AddBox('Sprint Speed', function(v1) -- Modify Speed
    _settings.Player.Sprint = tonumber(v1) or 30;
end)
Frame2:AddBox('Jump Power', function(v1) -- Modify Jump Power
    _settings.Player.Jump = tonumber(v1) or 45;
end)


-- // GUI Frame 3 // --
local Frame3 = library:AddFrame({name='Env Hax'})

local _trainFunction = getsenv(_plr.PlayerScripts.MoveTrain).MoveTrain;
Frame3:AddToggle('Pause Train', function(v1) -- Spoof Train Move Function
    getsenv(_plr.PlayerScripts.MoveTrain).MoveTrain = v1 and function() return end or _trainFunction;
end)
Frame3:AddToggle('Disable Fall Damage', function(v1) -- Toggle Fall Damage
    _settings.Player.Fall = v1;
end)
Frame3:AddToggle('Disable Ragdoll', function(v1) -- Toggle Ragdoll
    _settings.Player.Ragdoll = v1;
end)
Frame3:AddBox('Gravity', function(v1) -- Modify Gravity
    game.Workspace.Gravity = tonumber(v1) or 196.2;
end)


-- // Keybinds // --
Keybind:NewBind(Enum.KeyCode.RightShift, function() -- Library Keybind
    library:Toggle();
end)
Keybind:NewBind(Enum.KeyCode.F, function() -- Fly Keybind
    _fly:Toggle()
end)
Keybind:NewBind(Enum.KeyCode.N, function() -- Noclip Keybind
    _noclip:Toggle()
end)
Keybind:NewBind(Enum.KeyCode.Space, function() -- Inf Jump
    if _plr.Character and _plr.Character.Humanoid.FloorMaterial == Enum.Material.Air and _settings.Player.InfJump and not _settings.Player.Fly then
        _plr.Character.Humanoid:ChangeState('Jumping')
    end
end)


-- // Hooks //  --
ragdollHook = hookfunc(require(_shared.Modules.Ragdoll).EnableRagdoll, function(...) -- Disable Client Ragdoll
    if _settings.Player.Ragdoll then
        require(_shared.Modules.Ragdoll).DisableRagdoll(...)
        return;
    end
    return ragdollHook(...)
end)
recoilHook = hookfunc(require(game.ReplicatedStorage.GunScripts.GunLocalModule).shakeCam, function(v1) -- Disable Client Recoil

    if _settings.Weapon['Recoil'] then
        if _settings.Weapon['Rate'] then
            return
        end
        return wait(0.2)
    end

    return recoilHook(v1)
end)
weaponHook = hookfunc(require(game.ReplicatedStorage.GunScripts.GunLocalModule).fireGun, function(v1, ...) -- Modify Weapon At Fire
    local _old = { }
    for i,v in pairs(v1.GunStats) do
        _old[i]=v;
    end
    local _new = _client:CustomShot(v1)
    weaponHook(_new, ...)
    v1.GunStats = _old;
end)
reloadHook = hookfunc(require(game.ReplicatedStorage.GunScripts.GunLocalModule).reloadGun, function(v1) -- Modify Weapon At Reload
    local _old = { }
    for i,v in pairs(v1.GunStats) do
        _old[i]=v;
    end
    local _new = _client:CustomShot(v1)
    reloadHook(_new)
    v1.GunStats = _old;
end)

-- // Character Spawn // --
game.Workspace.ChildAdded:connect(function(c)
    local _humanoid = c:WaitForChild('Humanoid',1)
    if _humanoid then
        _shared:UpdatedFolders();
    end
end)


-- // Metatables // --
m = getrawmetatable(game)
old_Index = m.__index
oldnc = m.__namecall
oldnw = m.__newindex
oldc = m.__call

setreadonly(m, false)

m.__index = function(t, k)
    if tostring(t) == 'Humanoid' and k == 'WalkSpeed' then -- Walkspeed Spoof
        return 13
    end
    return old_Index(t, k)
end

m.__newindex = function(t, k, v) 
    if tostring(t) == 'Humanoid' and k == 'WalkSpeed' then -- Modify Sprint
        if v == 30 or v == 26 then
            v = _settings.Player.Sprint;
        end
    elseif tostring(t) == 'Humanoid' and k == 'JumpPower' then -- Modify Jump
        v = _settings.Player.Jump;
    end
    return oldnw(t, k, v)
end

m.__namecall = function(self, ...)
    local args = {...}
    if getnamecallmethod() == 'FireServer' then
        if tostring(self) == 'ChangeCharacter' and args[1] == 'Damage' and _settings.Player.Fall then -- Disable Fall Damage
            return;
        elseif tostring(self) == 'ChangeCharacter' and args[1] == 'Ragdoll' and _settings.Player.Ragdoll then -- Disable Server Ragdoll
            return;
        end
    end
    return oldnc(self, unpack(args))
end

-- // EXTRA FLAIRE // --
if _settings.Extra['Loaded'] then
    _client:Notification('Script Loaded', Color3.fromRGB(115, 80, 146), true, 3);
end