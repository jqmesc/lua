-- game https://www.roblox.com/games/10171072079/

--[[
[TO DO]

- kill team
- bypass votekick
- find bomb
- breach all walls
- control all drones/cameras
- lag others (wallbang)
- kill feed stuff
- insta interact/interact distance
- swap team

--]]

local main_module = loadstring(game:HttpGet('https://raw.githubusercontent.com/Sinscrips/source_scripts/main/main_module_v2.lua', true))()
local library = main_module['Library']
local esp = main_module['Esp']
local aimbot = main_module['Aimbot']
local uis = game:GetService('UserInputService')
local cls = game:GetService('CollectionService')

local _plr = game.Players.LocalPlayer
local _workspace = game.Workspace.SE_Workspace
local _skorpioEngine = game.ReplicatedStorage.Skorpio_Engine
local _drones = _workspace.Drones

local _settings = {
    god_mode = false;
    fall_damage = false;
    point_farm = false;
    noclip = false;
    anti_drone = false;
    bunnyhop = false;
    esp = false;
    jump_power = 30;
    head_size = 1;
    drone_speed = 1;
    speed_mult = 1;
    aim_folder = { };
    gun_mods = {
        InstaEquip = false;
        Recoil = false;
        Spread = false;
        Delay = false;
        Ammo = false;
        Walls = false;
        Damage = false;
        InstaReload = false;
        InstaADS = false;
        AutoFire = false;
        FireMode = 'Default';
        CustomGun = 'Default';
        CrossHairStyle = 'Crosshair';
    };
}
local _shared = {
    storage = { };
    weapon_info = { };
    weapon_list = { };
    enemies = { };
    gravity = 196.2;
    skins = _skorpioEngine.Skins;
    modules = _skorpioEngine.Modules;
    events = _skorpioEngine.Events;
    events2 = game.ReplicatedStorage.Game.Eventos;
    rainbow_val = Color3.fromRGB();
}
local _client = { 
    current_weapons = { };
    Functions = { };
    Alive = cls:HasTag(_plr, 'Alive');
    GameGui = _plr.PlayerGui.GameGui;
    InDrone = require(_shared.modules.DroneModule).InDrone;
    Key = _shared.events.AcessId:InvokeServer(_plr.UserId) .. '-' .. _plr.UserId
}
-- local _admin = {
--     main = getrenv()._G.HDAdminMain;
--     Commands = rawget(getrenv()._G.HDAdminMain, GetModule) and getrenv()._G.HDAdminMain:GetModule('ClientCommands') or nil;
--     ActiveCommands = getrenv()._G.HDAdminMain.commandsActive;
-- }

-- // Custom Game Functions // --
local _functions = _client.Functions

function _functions:MagReload()
    if _client.Alive then
        local _index = _settings.gun_mods.InstaReload and true or false
        --print('insta reload indexed', _index)

        _settings.gun_mods.InstaReload = true
        _client.framework.Reload()
        _settings.gun_mods.InstaReload = _index
    end
end
function _functions:Reload()
    if _client.Alive then
        _client.framework.Reload()
    end
end
function _functions:Fire()
    if _client.Alive then
        --_client.framework.new_bullet()
        _client.framework.FireAction('Fire', Enum.UserInputState.Begin)
        wait() -- delay between shots
        _client.framework.FireAction('Fire', Enum.UserInputState.End)
    end
end
function _functions:Kill(v1)
    if _client.Alive and v1:IsA('Player') and v1.Character then
        _client.framework.BulletDamage(v1.Character.Head)
    end
end
function _functions:SetState(v1)
    if _client.Alive and _plr.Character then
        -- if v1 == 'noclip' then
        --     --print('set state to noclip')
        --     _admin.main.commandsActive['noclip'] = true
        --     _admin.Commands.noclip:Activate()
        -- elseif v1 == 'clip' then
        --     _admin.main.commandsActive['noclip'] = nil
        --     _admin.Commands.clip:Function()
        if v1 == 'Crouch' then
            _shared.storage.Movement('Crouch', Enum.UserInputState.Begin)
        elseif v1 == 'Stand' then
            _shared.storage.Movement('Stand', Enum.UserInputState.Begin)
        elseif v1 == 'LeanLeft' then
            _shared.storage.Lean('LeanLeft', Enum.UserInputState.Begin)
        elseif v1 == 'LeanRight' then
            _shared.storage.Lean('LeanRight', Enum.UserInputState.Begin)
        elseif v1 == 'UnLean' then
            _shared.storage.Lean('LeanLeft', Enum.UserInputState.Begin)
            _shared.storage.Lean('LeanRight', Enum.UserInputState.Begin)
            _shared.storage.Lean('LeanRight', Enum.UserInputState.Begin)        
        end
    end
end
function _functions:EditCurrentWeapons(v1, v2)
    for i,v in pairs(_client.current_weapons) do
        if rawget(require(v), v1) ~= nil then
            if v2 == 'Default' then
                require(v)[v1] = rawget(_shared.weapon_info[tostring(v)], v1)
                --print('restored default waepon setting')
            else
                require(v)[v1] = v2
                --print('weapon hax')
            end
        end
    end
end
function _functions:SetAttachment(v1, v2)
    if v1 == 'Sight' then

    end
    -- find better way to equip

    -- _client.framework.Disabled = true
    -- _client.framework.Disabled = false
end
function _functions:JamWeapons(v1)
    _functions:EditCurrentWeapons('Jammed', (v1==nil or v1==true) and true or false)
end
function _functions:SelfDamage(v2)
    _shared.events.Damage:FireServer(nil,nil,'Protected',nil,nil,true,v2, _client.Key)
end
function _functions:Heal()
    if _client.Alive and _plr.Character then
        local _amount = _plr.Character.Humanoid.MaxHealth - _plr.Character.Humanoid.Health
        --_shared.events.Damage:FireServer(nil,nil,'Protected',nil,nil,true,-1*_amount, _client.Key)
        _functions:SelfDamage(-1*_amount)
    end
end
function _functions:ApplySkin(v1)
    if game.Workspace.CurrentCamera:FindFirstChild('Viewmodel') then
        local _viewmodel = game.Workspace.CurrentCamera.Viewmodel:FindFirstChildOfClass('Model')

        if _shared.skins:FindFirstChild(v1) then
            require(_shared.modules.SkinHandler).ApplySkin(_viewmodel, {v1})
        end
    end
end
function _functions:Message(v1, v2)
    local _newMessage = _client.GameGui.MessageFeed.SpottedTag:Clone()
    _newMessage.Name = 'custom_message'
    _newMessage.Text = v1
    _newMessage.TextColor3 = Color3.fromRGB(150, 80, 146)
    _newMessage.Visible = true
    _newMessage.Parent = _client.GameGui
    _newMessage.ZIndex = 100
    _newMessage.Size = UDim2.new(.6, 0, .1, 0)
    _newMessage.Position = _newMessage.Position + UDim2.new(0.2, 0, 0.8, 0)

    wait(v2 or 2)
    _newMessage:Destroy()
end
function _functions:EquipWeapon(v1)
    if not _plr.PlayerGui.GModule:FindFirstChild(v1) then
        for i,v in pairs(_shared.weapon_list) do
            if v.Name == v1 then
                v:Clone().Parent = _plr.PlayerGui.GModule   
                _settings.gun_mods.CustomGun = v1  
                print('equipped custom gun')
            end
        end
    end

    local _index = _settings.gun_mods.InstaEquip and true or false

    _functions:EditCurrentWeapons('EquipAnim', function() return end)
    _functions:EditCurrentWeapons('UnEquipAnim', function() return end)
    keypress(0x31)
    keyrelease(0x31)
    wait()
    keypress(0x32)
    keyrelease(0x31)
    if not _index then
        _functions:EditCurrentWeapons('EquipAnim', 'Default')
        _functions:EditCurrentWeapons('UnEquipAnim', 'Default')
    end
end

-- // Data // --
local _customSkin = Instance.new('Texture', _shared.skins) -- insert custom skin
_customSkin.Name = 'Sinsane_Skin'
_customSkin.Texture = 'http://www.roblox.com/asset/?id=2811131518'
_customSkin.Transparency = 0
_customSkin.Color3 = Color3.fromRGB(255, 0, 0)

for i,v in pairs(getgc(true)) do -- unlock all skins
    if type(v) == 'table' and rawget(v, 'Skin') then
        for i2,v2 in pairs(_shared.skins:GetChildren()) do
            local _newSkin = { }
            
            _newSkin['SkinType'] = 'Universal'
            _newSkin['SkinName'] = v2.Name
            _newSkin['Rarity'] = v2==_customSkin and 'Legendary' or 'Epic'
            
            table.insert(v.Skin, _newSkin)
        end
     end
end

for i,v in pairs(game.ReplicatedStorage.Game.Classes:GetChildren()) do -- store weapon info
    for i2,v2 in pairs(v:GetChildren()) do
        if not _shared.weapon_info[v2.Name] then
            _shared.weapon_info[v2.Name] = require(v2)
            _shared.weapon_list[v2.Name] = v2
        end
    end
end
for i,v in pairs(game.ReplicatedStorage.Game.Classes:GetChildren()) do -- add all weapons to class
    for i2,v2 in pairs(_shared.weapon_list) do
        if not v:FindFirstChild(v2.Name) then
            v2:Clone().Parent = v
        end
    end
end

function updateClient()
    _client.Alive = cls:HasTag(_plr, 'Alive')
    _client.InDrone = require(_shared.modules.DroneModule).InDrone
    _client.current_weapons = { }
    _client.framework = nil
    _shared.current_map = nil
    --_admin.Commands = nil

    if #_settings.aim_folder  > 0 then -- clear aimbot folder
        for i,v in pairs(_settings.aim_folder) do
            table.remove(_settings.aim_folder, i)
        end
        print('aim folder cleared', #_settings.aim_folder)
    end
    for i,v in pairs(game.Players:GetChildren()) do  -- store enemies
        if v.TeamColor ~= _plr.TeamColor then
            if not _shared.enemies[v] then
                _shared.enemies[v] = v
            end
            if cls:HasTag(v, 'Alive') then   
                spawn(function()  
                    repeat wait() until v.Character
                    table.insert(_settings.aim_folder, v.Character)
                    print('player inserted')
                end)
            end
        end
    end
    for i,v in pairs(game.Workspace:GetChildren()) do -- store active map
        if v:FindFirstChild('ATKSpawn') and v:FindFirstChild('DEFSpawn') then
            _shared.current_map = v
        end
    end
    if _client.InDrone then -- store drone jump
        require(_shared.modules.DroneModule).CurrentDrone.Humanoid.JumpPower = _settings.JumpPower
        for i,v in pairs(getgc()) do
            if getinfo(v).name == 'onJump' then
                _shared.storage.DroneJumpFunction = v
                --print('set jump delay and stored jump function')
            end
        end
    end

    if _client.Alive then
        repeat wait() until _plr.Character
        repeat wait() until #_plr.PlayerGui.GModule:GetChildren() > 2
        _client.framework = getsenv(_plr.PlayerGui:WaitForChild('SE_Framework'))
        --_admin.Commands = _admin.main:GetModule('ClientCommands')

        _plr.Character.Humanoid.JumpPower = _settings.jump_power

        -- gun mods
        for i,v in pairs(_plr.PlayerGui.GModule:GetChildren()) do
            
            print('weapon hijacked', v)
            table.insert(_client.current_weapons, v)

            if not _shared.weapon_info[v.Name] then       
                _shared.weapon_info[v.Name] = require(v)
                print('weapon info stored')
            end
            wait()
        end

        if _settings.gun_mods.Recoil then
            _functions:EditCurrentWeapons('gunRecoil', { })
        end
        if _settings.gun_mods.Spread then
            _functions:EditCurrentWeapons('MinSpread', 0)
            _functions:EditCurrentWeapons('MaxSpread', 0)
            _functions:EditCurrentWeapons('WalkMult', 0)
        end
        if _settings.gun_mods.Delay then
            _functions:EditCurrentWeapons('ShootRate', 10000)
        end
        if _settings.gun_mods.Ammo then
            _functions:EditCurrentWeapons('Ammo', math.huge)
            _functions:EditCurrentWeapons('StoredAmmo', math.huge)
            _functions:EditCurrentWeapons('AmmoInGun', math.huge)
        end
        if _settings.gun_mods.Damage then
            _functions:EditCurrentWeapons('MinDamage', math.huge)
        end
        if _settings.gun_mods.CrossHairStyle == 'Crosshair' or _settings.gun_mods.CrossHairStyle == 'Both' then
            _functions:EditCurrentWeapons('CrossHair', true)
        end
        if _settings.gun_mods.CrossHairStyle == 'CenterDot' or _settings.gun_mods.CrossHairStyle == 'Both' then
            _functions:EditCurrentWeapons('CenterDot', true)
            _functions:EditCurrentWeapons('CrossHair', _settings.gun_mods.CrossHairStyle == 'Both' and true or false)
        end
        _client.framework.ADS(true)
        _client.framework.ADS(false)

        if _settings.gun_mods.InstaEquip then
            _functions:EditCurrentWeapons('EquipAnim', function() return end)
            _functions:EditCurrentWeapons('UnEquipAnim', function() return end)
        end
        if _settings.gun_mods.InstaADS then
            --setupvalue(_client.framework.ADS, 6, TweenInfo.new(0.01, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0))
        end
        if _settings.gun_mods.Walls then
            table.insert(getupvalue(_client.framework.BulletRaycast, 2), _shared.current_map)
            for i,v in pairs(_shared.enemies) do
                if v.Character and v.Character:FindFirstChild('SLe Bloc') then
                    table.insert(getupvalue(_client.framework.BulletRaycast, 2), v.Character:FindFirstChild('SLe Bloc'))
                end
            end
        end

        -- if _settings.anti_drone then
        --     local t = tick()
        --     repeat wait() until #_drones:GetChildren() > 0 or tick() - t > 5
        --     for i,v in pairs(_drones:GetChildren()) do
        --         repeat wait() until v:FindFirstChild('Owner')
        --         local _owner = v.Owner.Value
        --         if _owner and _owner.TeamColor ~= _plr.TeamColor then
        --             _client.framework.BulletDamage(v.HumanoidRootPart)
        --             print('broke enemy drone')
        --         end
        --     end
        -- end
        if _settings.god_mode then
            _functions:SelfDamage(-9e9)
        end         
        -- NOCLIP
        -- if _settings.noclip then
        --     _functions:SetState('noclip')
        -- end
        -- HOOK
        local _hooks = { }
        _hooks.Reload = hookfunc(_client.framework.ReloadAnim, function()
            if _settings.gun_mods.InstaReload then
                print('attempt reload')
                return
            end
            return _hooks.Reload()
        end)
        _hooks.TacReload = hookfunc(_client.framework.TacticalReloadAnim, function()
            if _settings.gun_mods.InstaReload then
                print('attempt tactical reload')
                return
            end
            return _hooks.TacReload()
        end)
        -- _hooks.Equip = hookfunc(_client.framework.setup, function(v1) -- equip weapon
        --     if _settings.gun_mods.CustomGun ~= 'Default' then
        --         repeat wait() until _plr.PlayerGui.GModule:FindFirstChild(_settings.gun_mods.CustomGun)
        --         v1 = _settings.gun_mods.CustomGun
        --     end

        --     return _hooks.Equip(v1)
        -- end)
        -- upd functions
        for i,v in pairs(getgc()) do
            if getinfo(v).source:find('SE_Framework') then
                for i2,v2 in pairs(getconstants(v)) do
                    if v2 == 'Jump' then
                        _shared.storage.JumpFunction = {[1]=v,[2]=i2}
                        if _settings.bunnyhop then
                            setconstant(v, i2, 'fuckyou')
                        end
                    end
                    if v2 == 5E-07 then
                        _shared.storage.AimFunction = {[1]=v,[2]=i2}
                        if _settings.gun_mods.InstaADS then
                            setconstant(v, i2, 0)
                        end
                    end
                end
                if getinfo(v).name == 'handleAction' then
                    _shared.storage.Movement = v
                end
                if getinfo(v).name == 'LeanAction' then
                    _shared.storage.Lean = v
                end
            end
        end

    end

    print('updated client')
end

-- // Frames // --
local Frame1 = library:AddFrame({name='Weapon Modifications'})
local Frame2 = library:AddFrame({name='Player Modifications'})
local Frame3 = library:AddFrame({name='Environment Modifications [Must be Alive]'})

-- / Frame1 (Weapon) / --
Frame1:AddToggle('Disable Recoil', function(v1)
    _settings.gun_mods['Recoil'] = v1

    if _client.Alive then

        -- for i,v in pairs(_client.current_weapons) do
        --     require(v)['gunRecoil'] = v1 and { } or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['gunRecoil']
        -- end
        _functions:EditCurrentWeapons('gunRecoil', v1 and { } or 'Default')
    end
end)

Frame1:AddToggle('Disable Spread', function(v1)
    _settings.gun_mods['Spread'] = v1

    if _client.Alive then

        -- for i,v in pairs(_client.current_weapons) do
        --     require(v)['MinSpread'] = v1 and 0 or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['MinSpread'] 
        --     require(v)['MaxSpread'] = v1 and 0 or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['MaxSpread'] 
        --     require(v)['WalkMult'] = v1 and 0 or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['WalkMult'] 
        --     require(v)['RandomTracer']['Enabled'] = v1 and true or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['RandomTracer']['Enabled']
        -- end
        _functions:EditCurrentWeapons('MinSpread', v1 and 0 or 'Default')
        _functions:EditCurrentWeapons('MaxSpread', v1 and 0 or 'Default')
        _functions:EditCurrentWeapons('WalkMult', v1 and 0 or 'Default')
    end
end)

Frame1:AddToggle('Disable Fire Delay', function(v1)
    _settings.gun_mods['Delay'] = v1

    if _client.Alive then

        -- for i,v in pairs(_client.current_weapons) do
        --     require(v)['ShootRate'] = v1 and 10000 or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['ShootRate']
        -- end
        _functions:EditCurrentWeapons('ShootRate', v1 and 10000 or 'Default')

    end
end)

Frame1:AddToggle('Infinite Ammo', function(v1)
    _settings.gun_mods['Ammo'] = v1

    if _client.Alive then
        -- for i,v in pairs(_client.current_weapons) do
        --     require(v)['Ammo'] = v1 and math.huge or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['Ammo'] 
        --     require(v)['StoredAmmo'] = v1 and math.huge or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['StoredAmmo']
        --     require(v)['AmmoInGun'] = v1 and math.huge or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['AmmoInGun']
        -- end
        _functions:EditCurrentWeapons('Ammo', v1 and math.huge or 'Default')
        _functions:EditCurrentWeapons('StoredAmmo', v1 and math.huge or 'Default')
        _functions:EditCurrentWeapons('AmmoInGun', v1 and math.huge or 'Default')
    end
end)

Frame1:AddToggle('Infinite Damage', function(v1)
    _settings.gun_mods['Damage'] = v1
    if _client.Alive then
        _functions:EditCurrentWeapons('MinDamage', v1 and math.huge or 'Default')
    end
end)

Frame1:AddToggle('Instant Reload', function(v1)
    _settings.gun_mods.InstaReload = v1
end)

Frame1:AddToggle('Instant Equip', function(v1)
    _settings.gun_mods['InstaEquip'] = v1
    if _client.Alive then
        _functions:EditCurrentWeapons('EquipAnim', v1 and function() return end or 'Default')
        _functions:EditCurrentWeapons('UnEquipAnim', v1 and function() return end or 'Default')
    end
end)

Frame1:AddToggle('Instant ADS', function(v1)
    _settings.gun_mods.InstaADS = v1
    if _client.Alive and _plr.Character then

        setconstant(_shared.storage.AimFunction[1], _shared.storage.AimFunction[2], v1 and 0 or 5E-07)
        --setupvalue(_client.framework.ADS, 6, TweenInfo.new(v1 and 0.01 or 0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out, 0, false, 0))

    end
end)

Frame1:AddToggle('Wallbang', function(v1)
    _settings.gun_mods['Walls'] = v1

    if _client.Alive and _plr.Character and rawget(_client.framework, 'BulletRaycast') then
        local ignore_list = getupvalue(_client.framework.BulletRaycast, 2)
        if v1 then
            table.insert(ignore_list, _shared.current_map)
        else
            for i,v in pairs(ignore_list) do
                if v == _shared.current_map then
                    table.remove(ignore_list, i)
                end
            end
        end
    end
end)

Frame1:AddSwitch('Crosshair Style', {'Crosshair', 'CenterDot', 'Both'}, function(v1)
    _settings.gun_mods.CrossHairStyle = v1
    if _client.Alive then

        -- for i,v in pairs(_client.current_weapons) do
        --     require(v)['CrossHair'] = (v1 == 'Crosshair' or v1 == 'Both') and true or false
        --     require(v)['CenterDot'] = (v1 == 'CenterDot' or v1 == 'Both') and true or false
        -- end
        _functions:EditCurrentWeapons('CrossHair', (v1 == 'Crosshair' or v1 == 'Both') and true or false)
        _functions:EditCurrentWeapons('CenterDot', (v1 == 'CenterDot' or v1 == 'Both') and true or false)
        _client.framework.ADS(true)
        _client.framework.ADS(false)
        
    end
end)

Frame1:AddSwitch('Shoot Type', {'Default', 'Auto', 'Burst', 'Semi'}, function(v1) -- ShootType1=Semi/ShootType2=Burst/ShootType3=Auto
    _settings.gun_mods.FireMode = v1
    if _client.Alive then

        -- for i,v in pairs(_client.current_weapons) do
        --     require(v)['ShootType'] = (v1=='Auto' and 3) or (v1=='Burst' and 2) or (v1=='Semi' and  1) or _shared.weapon_info[v.Name] and _shared.weapon_info[v.Name]['ShootType'] 
        -- end
        _functions:EditCurrentWeapons('ShootType', (v1=='Auto' and 3) or (v1=='Burst' and 2) or (v1=='Semi' and  1) or 'Default')
    end
end)

-- / Frame 2 (Player) / --
Frame2:AddToggle('ESP', function(v1)
    _settings.esp = v1
    
    for i,v in pairs(_shared.enemies) do
        if cls:HasTag(v, 'Alive') and v.Character then
            local _tag = v.Character:WaitForChild('TeamTagUI')
            local marker = _tag:WaitForChild('Marker') 
            local label = _tag.StatsFrame.NameText
            local health = _tag.StatsFrame.Health
            
            _tag.Enabled = v1
            marker.Enabled = v1
            marker.Adornee = v.Character
            marker.OutlineColor = Color3.fromRGB(255, 0, 0)
            marker.FillTransparency = 1
            marker.FillColor = Color3.fromRGB(255, 0, 0)
            label.Text = v.Name
            health.Visible = v1
            spawn(function()
                repeat wait()
                    if v.Character and v.Character:FindFirstChild('Humanoid') then
                        health.Healthbar.Size = UDim2.new(v.Character.Humanoid.Health/100, 0, 1, 0)
                        marker.FillTransparency = v.Character:WaitForChild('ClientConfig'):GetAttribute('Defuser') and 0.6 or 1
                    end
                until not _settings.esp or not v.Character
            end)
        end
    end 
end)

local _aimbot
Frame2:AddToggle('Aimbot', function(v1)
    if v1 then
        _aimbot = aimbot.new({
            folder = _settings.aim_folder;
            target = 'Head';
            key = Enum.KeyCode.X;
        })
        print(#_settings.aim_folder)
    else
        _aimbot:Remove()
    end
end)

Frame2:AddToggle('Auto Shoot', function(v1)
    _settings.gun_mods.AutoFire = v1

    if v1 then
        repeat wait()
            if _client.Alive and _plr.Character then
                local target = _plr:GetMouse().target
                if target and target:FindFirstAncestorOfClass('Model') then
                    local player = game.Players:FindFirstChild(target:FindFirstAncestorOfClass('Model').Name)
                    if player and player.TeamColor ~= _plr.TeamColor then
                        _functions:Fire()
                    end
                end
            end
        until not _settings.gun_mods.AutoFire
    end
end)

Frame2:AddToggle('God Mode', function(v1)
    _settings.god_mode = v1

    if _client.Alive and _plr.Character then
        if v1 then
            _functions:SelfDamage(-9e9)
        else
            _functions:SelfDamage(-1*(_plr.Character.Humanoid.MaxHealth - _plr.Character.Humanoid.Health)-1000)
            wait(.5)
            _functions:Heal()
        end
    end
end)

-- Frame2:AddToggle('Noclip', function(v1)
--     _settings.noclip = v1
--     if _client.Alive then
--         _functions:SetState(v1 and 'noclip' or 'clip')
--     end
-- end)

Frame2:AddToggle('Point Farm', function(v1)
    _settings.point_farm = v1
    if _client.Alive and v1 then
        repeat wait()
            if _client.Alive then
                for i,v in pairs(game.Workspace.DoorHitbox:GetChildren()) do
                    _shared.events.Breach:InvokeServer(4, v)
                end
                for i,v in pairs(_workspace.Doors:GetChildren()) do
                    if v:FindFirstChild('Door') then
                        _shared.events.Breach:InvokeServer(2, v.Door, Vector3.new())
                    end
                end
                repeat wait() until #_workspace.Doors:GetChildren() == 0 or not _settings.point_farm
                print('all doors destroyed')
            end

        until not _settings.point_farm or not _client.Alive
    end
end)

-- Frame2:AddToggle('Disable Enemy Drones', function(v1)
--     _settings.anti_drone = v1

--     if v1 and _client.Alive and _plr.Character then
--         for i,v in pairs(_drones:GetChildren()) do
--             repeat wait() until v:FindFirstChild('Owner')
--             local _owner = v.Owner.Value
--             if _owner and _owner.TeamColor ~= _plr.TeamColor then
--                 _client.framework.BulletDamage(v.HumanoidRootPart)
--             end
--         end
--     end
-- end)

Frame2:AddToggle('Disable Anti-Bunny Hop', function(v1)
    _settings.bunnyhop = v1

    if _client.Alive then
        if _client.InDrone then
            setconstant(_shared.storage.DroneJumpFunction, 9, v1 and 0 or 1.5)
        end
        if not _client.InDrone then
            setconstant(_shared.storage.JumpFunction[1], _shared.storage.JumpFunction[2], v1 and 'fuckyou' or 'Jump')
        end
    end
end)

Frame2:AddToggle('Disable Fall Damage', function(v1)
    _settings.fall_damage = v1
end)

Frame2:AddBox('Jump Power', function(v1)
    _settings.jump_power = tonumber(v1) or 30
    if _client.Alive then
        if _plr.Character then
            _plr.Character.Humanoid.JumpPower = _settings.jump_power
        end
        if _client.InDrone then
            require(_shared.modules.DroneModule).CurrentDrone.Humanoid.JumpPower = _settings.jump_power
        end
    end
end)

Frame2:AddBox('Speed Multiplier', function(v1)
    _settings.drone_speed = tonumber(v1) or 1
    _settings.speed_mult = tonumber(v1) or 1
end)

-- / Frame3 (Environment) / --
Frame3:AddButton('Kill Enemies', function()
    if _client.Alive then

        for i,v in pairs(_shared.enemies) do
            if cls:HasTag(v, 'Alive') and v.Character then
                _client.framework.BulletDamage(v.Character.Head)
            end
        end

    end
end)

Frame2:AddButton('Destroy Enemy Drones', function()
    if v1 and _client.Alive and _plr.Character then
        for i,v in pairs(_drones:GetChildren()) do
            repeat wait() until v:FindFirstChild('Owner')
            local _owner = v.Owner.Value
            if _owner and _owner.TeamColor ~= _plr.TeamColor then
                _client.framework.BulletDamage(v.HumanoidRootPart)
            end
        end
    end
end)

Frame3:AddButton('Destroy Cameras', function()
    if _client.Alive and #_workspace.Cameras:GetChildren() > 0 then
        for i,v in pairs(_workspace.Cameras:GetChildren()) do
            _client.framework.BulletDamage(v.HumanoidRootPart)
        end
    end
end)

Frame3:AddButton('Destroy Gadgets', function()
    if _client.Alive and #game.Workspace.Gadgets:GetChildren() > 0 then
        for i,v in pairs(game.Workspace.Gadgets:GetChildren()) do
            _client.framework.BulletDamage(v:FindFirstChildOfClass('Part'))
        end
    end
end)

Frame3:AddButton('Board All Doors', function()
    if _client.Alive then
        for i,v in pairs(game.Workspace.DoorHitbox:GetChildren()) do
            _shared.events.Breach:InvokeServer(4, v)
        end
    end
end)

Frame3:AddButton('Breach All Doors', function()
    if _client.Alive then
        for i,v in pairs(_workspace.Doors:GetChildren()) do
            if v:FindFirstChild('Door') then
                -- spawn(function()
                --     for i = 0, 100 do
                --         _client.framework.BulletDamage(v.Door)
                --     end
                -- end)
                _shared.events.Breach:InvokeServer(2, v.Door, Vector3.new())
            end
        end
    end
end)

-- Frame3:AddButton('Breach All Walls', function()
--     if _client.Alive then
--         for i,v in pairs(_workspace.Breach:GetChildren()) do
--             if v:FindFirstChild('Destroyable') then
--                 for i = 0, 10 do
--                     for i2,v2 in pairs(v.Destroyable:GetChildren()) do
--                         for i = 0, 100 do
--                             _client.framework.BulletDamage(v2)
--                         end
--                     end
--                 end
--             end
--         end

--     end
-- end)

Frame3:AddButton('Plant Invisible Defuser [Attacker]', function()
    if _client.Alive then
        _shared.events2.Defuse:InvokeServer(3)
        _shared.events2.Defuse:InvokeServer(1)
    end
end)

Frame3:AddButton('Disable Active Defuser', function()
    if _client.Alive then
        _shared.events2.Defuse:InvokeServer(2)
    end
end)

Frame3:AddBox('Enemy Head Size', function(v1)
    _settings.head_size = tonumber(v1) or 1
    if v1 then
        for i,v in pairs(_shared.enemies) do
            if cls:HasTag(v, 'Alive') and v.Character then
                v.Character.Head.Size = v.Character.Head.OriginalSize.Value*_settings.head_size
            end
        end
    end
end)

Frame3:AddBox('Gravity Multiplier', function(v1)
    game.Workspace.Gravity = _shared.gravity*tonumber(v1) or 1
end)

-- Frame3:AddBox('Custom Gun', function(v1) -- CHECK FOR CAPS LOCK SENSITIVE
--     if _client.Alive and _plr.Character then
--         for i,v in pairs(_shared.weapon_list) do
--             if v.Name:lower() == v1:lower() then
--                 _settings.gun_mods.CustomGun = v.Name
--                 _functions:EquipWeapon(v.Name)
--                 return
--             end
--         end
--     end
--     _settings.gun_mods.CustomGun = 'Default'
--     _functions:EquipWeapon('Default')
-- end)

-- // Metatables // --
m = getrawmetatable(game)
old_Index = m.__index
oldnc = m.__namecall
oldnw = m.__newindex
oldc = m.__call

setreadonly(m, false)

m.__newindex = function(t, k, v)

    if tostring(t) == 'BodyVelocity' and k == 'Velocity' then

        return oldnw(t, k, v*_settings.drone_speed)

    elseif tostring(t) == 'TeamTagUI' and k == 'Enabled' then

        local player = game.Players:FindFirstChild(t.Parent.Name)
        if player and player.Character and player.TeamColor ~= _plr.TeamColor then
            --print('attempt to modify live enemy tag to '..tostring(v))
            v = _settings.esp
        end

    elseif tostring(t) == 'HealthText' and k == 'Text' then

        if _settings.god_mode then
            v = 'Inf'
        end
    
    elseif tostring(t) == 'Humanoid' and k == 'Health' and _settings.god_mode then

        if _plr.Character and t:IsDescendantOf(_plr.Character) then

            local _maxamount = 9e9
            local _amount = _maxamount - v

            _functions:SelfDamage(-1*_amount)

        end

    end
    return oldnw(t, k, v)
end
m.__namecall = function(self, ...)
    local args = {...}

    if getnamecallmethod() == 'FireServer' then
        
        if args[3] == nil and args[8] == _client.Key and _settings.fall_damage then
            print('attempt fall damage')
            return
        end

    elseif getnamecallmethod() == 'GetAttribute' then

        if args[1] == 'Mobility' and _settings.speed_mult ~= 1 then
            return oldnc(self, ...)*_settings.speed_mult
        end

    -- elseif getnamecallmethod() == 'clone' and self == _customSkin then
    --     print('replicated client skin')
        
    
    end
    return oldnc(self, unpack(args))
end

-- // Loops // --
spawn(function()
    local n = 0
    while wait() do
        _shared.rainbow_val = Color3.fromHSV(n, 1, 1)
        n = (n + 0.01) % 1
    end
end)

-- // Hooks // --
_droneHook1 = hookfunc(require(_shared.modules.DroneModule).Enable, function(...) -- entered drone
    spawn(function()
        repeat wait() until require(_shared.modules.DroneModule).InDrone
        _client.InDrone = true
        print('drone spawned')
        require(_shared.modules.DroneModule).CurrentDrone.Humanoid.JumpPower = _settings.jump_power
        for i,v in pairs(getgc()) do
            if getinfo(v).name == 'onJump' then
                _shared.storage.DroneJumpFunction = v
                setconstant(v, 9, _settings.bunnyhop and 0 or 1.5)
                print('set jump delay and stored jump function')
            end
        end
    end)
    return _droneHook1(...)
end)
_droneHook2 = hookfunc(require(_shared.modules.DroneModule).Disable, function(...) -- left drone
    if _client.InDrone == true then
        _client.InDrone = false
        print('drone false')
    end
    return _droneHook2(...)
end)
_skinHook = hookfunc(require(_shared.modules.SkinHandler).ApplySkin, function(...) -- rainbow weapon skin
    local args = {...}
    if args[2] and args[2][1] and args[2][1] == 'Sinsane_Skin' then
        --print('replicated client skin')
        spawn(function()
            repeat wait() until args[1]:FindFirstChild('Sinsane_Skin', true)
            for i,v in pairs(args[1]:GetDescendants()) do
                if v.Name == 'Sinsane_Skin' then
                    --print('skin loaded')
                    spawn(function()
                        repeat wait()
                            v.Color3 = _shared.rainbow_val
                        until not v
                    end)
                end
            end
        end)
    end

    return _skinHook(...)
end)

-- // Keybind // --
uis.InputBegan:connect(function(key) -- toggle library
    if key.KeyCode == Enum.KeyCode.RightShift then
        library:Toggle()
    end
end)

-- // Property Spy // --
-- _drones.ChildAdded:connect(function(z)
--     if _client.Alive and not _client.InDrone and z:WaitForChild('Owner').Value.TeamColor ~= _plr.TeamColor and _settings.anti_drone then
--         _client.BulletDamage(z.HumanoidRootPart)
--     end
-- end)
_plr:GetPropertyChangedSignal('TeamColor'):connect(function() -- team changed
    print('team changed')
    _shared.enemies = { }
    for i,v in pairs(game.Players:GetChildren()) do
        spawn(function()
            repeat wait() until v.TeamColor ~= game.Teams.Spec.TeamColor
            if v.TeamColor ~= _plr.TeamColor then
                _shared.enemies[v] = v
            end
        end)
    end
end)
game.Players.PlayerAdded:connect(function(z) -- player joined
    wait(0.05)
    spawn(function()
        repeat wait() until z.TeamColor ~= game.Teams.Spec.TeamColor
        if z.TeamColor ~= _plr.TeamColor and not _shared.enemies[z] then
            _shared.enemies[z] = z
            print('enemy player added', z)
        end
    end)
end)
game.Players.PlayerRemoving:connect(function(z) -- player leaving
    if _shared.enemies[z] then
        _shared.enemies[z] = nil
    end
end)
cls:GetInstanceAddedSignal('Alive'):connect(function(z) -- character spawned
    repeat wait() until z.Character -- wait for drone
    if z == _plr then
        updateClient()
        return
    end
    if z.TeamColor ~= _plr.TeamColor then -- is enemy
        z.Character.Head.Size = z.Character.Head.OriginalSize.Value*_settings.head_size
        if _settings.esp then
            local _tag = z.Character:WaitForChild('TeamTagUI')
            local marker = _tag:WaitForChild('Marker')
            local label = _tag.StatsFrame.NameText
            local health = _tag.StatsFrame.Health
            
            _tag.Enabled = true
            marker.Enabled = true
            marker.Adornee = z.Character
            marker.OutlineColor = Color3.fromRGB(255, 0, 0)
            marker.FillTransparency = 1
            marker.FillColor = Color3.fromRGB(255, 0, 0)
            label.Text = z.Name
            health.Visible = true

            spawn(function()
                repeat wait()
                    if z.Character and z.Character:FindFirstChild('Humanoid') then
                        health.Healthbar.Size = UDim2.new(z.Character.Humanoid.Health/100, 0, 1, 0)
                        marker.FillTransparency = z.Character:WaitForChild('ClientConfig'):GetAttribute('Defuser') and 0.6 or 1
                    end
                until not _settings.esp or not z.Character
            end)
        end
        table.insert(_settings.aim_folder, z.Character)
    end
    

end)
cls:GetInstanceRemovedSignal('Alive'):connect(function(z) -- character killed
    if z == _plr then
        updateClient()
        return
    end
    for i,v in pairs(_settings.aim_folder) do
        if tostring(v) == z.Name then
            table.remove(_settings.aim_folder, i)
        end
    end
end)

updateClient()
_functions:Message('Script loaded, credits to Sinsane (jaames#9911)')